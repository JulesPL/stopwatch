!function(e){function t(i){if(n[i])return n[i].exports;var r=n[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var n={};t.m=e,t.c=n,t.d=function(e,n,i){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:i})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=6)}([function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e){var t=void 0===e?"undefined":a(e);if("string"!==t)throw TypeError("Parameter 'event' is of type "+t+". It needs to be of type 'string'.")}function o(e){var t=void 0===e?"undefined":a(e);if("function"!==t)throw TypeError("Parameter 'listener' is of type "+t+". It needs to be of type 'function'.")}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u=function(){function e(){i(this,e),this._events={}}return s(e,[{key:"hasEvent",value:function(e){return void 0!==this._events[e]}},{key:"addEvent",value:function(e){r(e),this.hasEvent(e)||(this._events[e]=[])}},{key:"removeEvent",value:function(e){r(e)}},{key:"addEventListener",value:function(e,t){o(t),this.addEvent(e),this._events[e].push(t)}},{key:"removeEventListener",value:function(e,t){if(r(e),o(t),!this.hasEvent(e))return void console.warn("Can't remove the event listener because it does not exist!")}},{key:"triggerEventListeners",value:function(e,t){r(e),this.hasEvent(e)&&this._events[e].forEach(function(e){e(t)})}}]),e}();e.exports=new u},function(e,t,n){"use strict";e.exports={updateCurrentLapTime:"updateCurrentLapTime",updateTotalTime:"updateTotalTime",updateRecordedLaps:"updateRecordedLaps",stopwatchDidReset:"stopwatchDidReset"}},function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();t.Time=function(){function e(t){i(this,e),this.totalMilliseconds=t,this.minutes=0,this.seconds=0,this.milliseconds=0,this._populateTimeData()}return r(e,[{key:"_populateTimeData",value:function(){var e=this,t=[6e4,1e3,1],n=[];t.forEach(function(i,r){if(0===r)return n[0]=Math.floor(e.totalMilliseconds/i),void(n[1]=e.totalMilliseconds%t[0]);var o=n[n.length-1];n[n.length-1]=Math.floor(o/i),r!==t.length-1&&(n[n.length]=o%i)}),this.minutes=n[0],this.seconds=n[1],this.milliseconds=n[2]}},{key:"toString",value:function(){return{minutes:this.minutes<10?"0"+this.minutes:this.minutes,seconds:this.seconds<10?"0"+this.seconds:this.seconds,milliseconds:(this.milliseconds<10?"0"+this.milliseconds:this.milliseconds.toString()).substring(0,2)}}}]),e}()},function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.BaseView=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();n(4),t.BaseView=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;i(this,e),this.initialHTML=t.html,this.$container=t.$container,this.$container.innerHTML=this.initialHTML,this.classNames={},this.controller=n}return r(e,[{key:"addEventListener",value:function(e,t,n){e.addEventListener(t,this.controller[n].bind(this.controller,this),!1)}}]),e}()},function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});t.DOMData=function e(t,n){i(this,e),this.$container=document.querySelector(t),this.html=document.querySelector(n).innerHTML}},function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.TimeView=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),u=n(3),c=n(2),l=n(0),f=i(l),p=n(1),d=i(p);t.TimeView=function(e){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;r(this,t);var i=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i._prevTime=new c.Time(0),i._setupDOMRefs(),f.default.addEventListener(d.default.stopwatchDidReset,function(e){i.$container.innerHTML=i.initialHTML,i._setupDOMRefs()}),i}return s(t,e),a(t,[{key:"_setupDOMRefs",value:function(){this.$minutes=this.$container.querySelector(".minutes"),this.$seconds=this.$container.querySelector(".seconds"),this.$milliseconds=this.$container.querySelector(".milliseconds")}},{key:"updateTime",value:function(e){e.minutes!==this._prevTime.minutes&&(this.$minutes.textContent=e.toString().minutes),e.seconds!==this._prevTime.seconds&&(this.$seconds.textContent=e.toString().seconds),e.milliseconds!==this._prevTime.milliseconds&&(this.$milliseconds.textContent=e.toString().milliseconds),this._prevTime=e}}]),t}(u.BaseView)},function(e,t,n){"use strict";n(7);var i=n(8),r=n(4),o=n(11),s=n(12),a=n(13),u=n(14),c=n(15),l=new i.Stopwatch,f=new s.StopwatchControlsController(l);new o.StopwatchControlsView(new r.DOMData(".controls","#stopwatchControls"),f),new a.LapTimeView(new r.DOMData(".lapCount","#stopwatchLapTime")),new u.TotalTimeView(new r.DOMData(".totalCount","#stopwatchTotalTime")),new c.LapsTableView(new r.DOMData(".lapsTable","#stopwatchLapsTableRow"))},function(e,t){},function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.Stopwatch=void 0;var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),s=n(9),a=n(0),u=i(a),c=n(1),l=i(c);t.Stopwatch=function(){function e(){r(this,e),this._lapTimeTicker=new s.Ticker,this._totalTimeTicker=new s.Ticker,this.recordedLaps=[],this.time={currentLap:this._lapTimeTicker.time,total:this._totalTimeTicker.time};for(var t in l.default)l.default.hasOwnProperty(t)&&u.default.addEvent(l.default[t])}return o(e,[{key:"start",value:function(){var e=this;this._lapTimeTicker.startTicking(function(t){e.time.currentLap=t,u.default.triggerEventListeners(l.default.updateCurrentLapTime,e)}),this._totalTimeTicker.startTicking(function(t){e.time.total=t,u.default.triggerEventListeners(l.default.updateTotalTime,e)})}},{key:"stop",value:function(){this._lapTimeTicker.stopTicking(),this._totalTimeTicker.stopTicking()}},{key:"reset",value:function(){this._lapTimeTicker.reset(),this._totalTimeTicker.reset(),this.recordedLaps=[],u.default.triggerEventListeners(l.default.stopwatchDidReset,this)}},{key:"recordLap",value:function(){this.recordedLaps.push(this._lapTimeTicker.time),u.default.triggerEventListeners(l.default.updateRecordedLaps,this),this._lapTimeTicker.reset(),this.time.currentLap=this._lapTimeTicker.time,u.default.triggerEventListeners(l.default.updateCurrentLapTime,this)}}]),e}()},function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.Ticker=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=("function"==typeof Symbol&&Symbol.iterator,n(10));t.Ticker=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10;i(this,e),this._tickRate=t,this._elapsedTime=0,this._intervalID=null,this._isTicking=!1}return r(e,[{key:"startTicking",value:function(e){var t=this;this.isTicking||(this._intervalID=(0,o.setCorrectingInterval)(function(){t._elapsedTime+=t._tickRate,e(t.time)},this._tickRate),this._isTicking=!0)}},{key:"stopTicking",value:function(){this._isTicking&&((0,o.clearCorrectingInterval)(this._intervalID),this._id=null,this._isTicking=!1)}},{key:"reset",value:function(){this._elapsedTime=0}},{key:"time",get:function(){return this._elapsedTime}}]),e}()},function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_FACTORY__,__WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;!function(e,t){"object"==typeof n?module.exports=t():(__WEBPACK_AMD_DEFINE_ARRAY__=[],__WEBPACK_AMD_DEFINE_FACTORY__=t,void 0!==(__WEBPACK_AMD_DEFINE_RESULT__="function"==typeof __WEBPACK_AMD_DEFINE_FACTORY__?__WEBPACK_AMD_DEFINE_FACTORY__.apply(n,__WEBPACK_AMD_DEFINE_ARRAY__):__WEBPACK_AMD_DEFINE_FACTORY__)&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__));var n=t();for(var i in n)e[i]=n[i]}(this,function(){var numIntervals=0,intervals={},now=Date.now||function(){return(new Date).valueOf()},setCorrectingInterval=function(func,delay){function tick(){func(),intervals[id]&&(planned+=delay,intervals[id]=setTimeout(tick,planned-now()))}var id=numIntervals++,planned=now()+delay;switch(typeof func){case"function":break;case"string":var sFunc=func;func=function(){eval(sFunc)};break;default:func=function(){}}return intervals[id]=setTimeout(tick,delay),id},clearCorrectingInterval=function(e){clearTimeout(intervals[e]),delete intervals[e]};return{setCorrectingInterval:setCorrectingInterval,clearCorrectingInterval:clearCorrectingInterval}})},function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.StopwatchControlsView=void 0;var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),a=n(3);t.StopwatchControlsView=function(e){function t(e,n){i(this,t);var o=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return o.classNames.hide="hidden",o.classNames.disabled="disabled",o.$startBtn=document.getElementById("startBtn"),o.$stopBtn=document.getElementById("stopBtn"),o.$resetBtn=document.getElementById("resetBtn"),o.$lapBtn=document.getElementById("lapBtn"),o.addEventListener(o.$startBtn,"click","handleClickStartButton"),o.addEventListener(o.$lapBtn,"click","handleClickLapButton"),o.addEventListener(o.$stopBtn,"click","handleClickStopButton"),o.addEventListener(o.$resetBtn,"click","handleClickResetButton"),o}return o(t,e),s(t,[{key:"hideAllBtns",value:function(){return this.$startBtn.classList.add(this.classNames.hide),this.$lapBtn.classList.add(this.classNames.hide),this.$stopBtn.classList.add(this.classNames.hide),this.$resetBtn.classList.add(this.classNames.hide),this}},{key:"showStartBtn",value:function(){return this.$startBtn.classList.remove(this.classNames.hide),this}},{key:"showLapBtn",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this.$lapBtn.classList.remove(this.classNames.hide),e?(this.$lapBtn.classList.add(this.classNames.disabled),this.$lapBtn.setAttribute("disabled","true")):(this.$lapBtn.classList.remove(this.classNames.disabled),this.$lapBtn.removeAttribute("disabled")),this}},{key:"showStopBtn",value:function(){return this.$stopBtn.classList.remove(this.classNames.hide),this}},{key:"showResetBtn",value:function(){return this.$resetBtn.classList.remove(this.classNames.hide),this}}]),t}(a.BaseView)},function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.StopwatchControlsController=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=n(0);(function(e){e&&e.__esModule})(o),t.StopwatchControlsController=function(){function e(t){i(this,e),this.stopwatch=t}return r(e,[{key:"handleClickStartButton",value:function(e,t){this.stopwatch.start(),e.hideAllBtns().showStopBtn().showLapBtn(!1)}},{key:"handleClickLapButton",value:function(e,t){this.stopwatch.recordLap()}},{key:"handleClickStopButton",value:function(e,t){this.stopwatch.stop(),e.hideAllBtns().showStartBtn().showResetBtn()}},{key:"handleClickResetButton",value:function(e,t){this.stopwatch.reset(),e.hideAllBtns().showStartBtn().showLapBtn()}}]),e}()},function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.LapTimeView=void 0;var a=n(5),u=n(2),c=n(0),l=i(c),f=n(1),p=i(f);t.LapTimeView=function(e){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;r(this,t);var i=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return l.default.addEventListener(p.default.updateCurrentLapTime,function(e){var t=new u.Time(e.time.currentLap);i.updateTime(t)}),i}return s(t,e),t}(a.TimeView)},function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.TotalTimeView=void 0;var a=n(5),u=n(2),c=n(0),l=i(c),f=n(1),p=i(f);t.TotalTimeView=function(e){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;r(this,t);var i=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return l.default.addEventListener(p.default.updateTotalTime,function(e){var t=new u.Time(e.time.total);i.updateTime(t)}),i}return s(t,e),t}(a.TimeView)},function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.LapsTableView=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),u=n(2),c=n(3),l=n(0),f=i(l),p=n(1),d=i(p);t.LapsTableView=function(e){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;r(this,t);var i=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i.$container.innerHTML="",i._minimumLapRows=7,i._currentLapRows=0,i.addEmptyRows(),f.default.addEventListener(d.default.updateRecordedLaps,i.updateRows.bind(i)),f.default.addEventListener(d.default.stopwatchDidReset,function(e){i.$container.innerHTML="",i._currentLapRows=0,i.addEmptyRows()}),i}return s(t,e),a(t,[{key:"addEmptyRows",value:function(){for(;this._currentLapRows<this._minimumLapRows;){var e=this.initialHTML.replace("placeholderLabel","").replace("placeholderTime","");this.$container.innerHTML+=e,this._currentLapRows++}}},{key:"updateRows",value:function(e){var t=this,n=e.recordedLaps;this.$container.innerHTML="",this._currentLapRows=0,n.forEach(function(e,n){var i=n+1,r=new u.Time(e),o=r.toString(),s=o.minutes+":"+o.seconds+"."+o.milliseconds,a=t.initialHTML.replace("placeholderLabel","Lap "+i).replace("placeholderTime",s);t.$container.innerHTML+=a,t._currentLapRows++},this),this.addEmptyRows()}}]),t}(c.BaseView)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vanMvYXBwLmJ1bmRsZS5taW4uanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIDA2NTQ2ZjliOWU3ZWI2ZmIzZWU0Iiwid2VicGFjazovLy8uL2pzL2hlbHBlcnMvRXZlbnRNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL2pzL21vZGVsL1N0b3B3YXRjaEV2ZW50LmpzIiwid2VicGFjazovLy8uL2pzL21vZGVsL3RpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vanMvdmlldy9CYXNlVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9qcy9oZWxwZXJzL0RPTURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vanMvdmlldy9UaW1lVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9qcy9hcHAuanMiLCJ3ZWJwYWNrOi8vLy4vanMvbW9kZWwvc3RvcHdhdGNoLmpzIiwid2VicGFjazovLy8uL2pzL21vZGVsL1RpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcnJlY3RpbmctaW50ZXJ2YWwvY29ycmVjdGluZ0ludGVydmFsLmpzIiwid2VicGFjazovLy8uL2pzL3ZpZXcvU3RvcHdhdGNoQ29udHJvbHNWaWV3LmpzIiwid2VicGFjazovLy8uL2pzL2NvbnRyb2xsZXIvU3RvcHdhdGNoQ29udHJvbHNDb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL2pzL3ZpZXcvTGFwVGltZVZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vanMvdmlldy9Ub3RhbFRpbWVWaWV3LmpzIiwid2VicGFjazovLy8uL2pzL3ZpZXcvTGFwc1RhYmxlVmlldy5qcyJdLCJuYW1lcyI6WyJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsInZhbGlkYXRlRXZlbnQiLCJldmVudCIsImV2ZW50VHlwZSIsIl90eXBlb2YiLCJ2YWxpZGF0ZUxpc3RlbmVyIiwibGlzdGVuZXIiLCJsaXN0ZW5lclR5cGUiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwid3JpdGFibGUiLCJrZXkiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJTeW1ib2wiLCJpdGVyYXRvciIsIm9iaiIsImNvbnN0cnVjdG9yIiwiRXZlbnRNYW5hZ2VyIiwidGhpcyIsIl9ldmVudHMiLCJ2YWx1ZSIsImhhc0V2ZW50IiwiYWRkRXZlbnQiLCJwdXNoIiwiY29uc29sZSIsIndhcm4iLCJkYXRhIiwiZm9yRWFjaCIsInVwZGF0ZUN1cnJlbnRMYXBUaW1lIiwidXBkYXRlVG90YWxUaW1lIiwidXBkYXRlUmVjb3JkZWRMYXBzIiwic3RvcHdhdGNoRGlkUmVzZXQiLCJUaW1lIiwibWlsbGlzZWNvbmRzIiwidG90YWxNaWxsaXNlY29uZHMiLCJtaW51dGVzIiwic2Vjb25kcyIsIl9wb3B1bGF0ZVRpbWVEYXRhIiwiX3RoaXMiLCJNU0NPTlZFUlNJT05TIiwiZGlmZiIsInVuaXQiLCJpbmRleCIsIk1hdGgiLCJmbG9vciIsInJlbWFpbmRlciIsInRvU3RyaW5nIiwic3Vic3RyaW5nIiwiQmFzZVZpZXciLCJ1bmRlZmluZWQiLCJET01EYXRhIiwiY29udHJvbGxlciIsImFyZ3VtZW50cyIsImluaXRpYWxIVE1MIiwiaHRtbCIsIiRjb250YWluZXIiLCJpbm5lckhUTUwiLCJjbGFzc05hbWVzIiwiJGVsIiwiYWRkRXZlbnRMaXN0ZW5lciIsImJpbmQiLCJjb250YWluZXJTZWxlY3RvciIsInRlbXBsYXRlU2VsZWN0b3IiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiZGVmYXVsdCIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJUaW1lVmlldyIsIl9CYXNlVmlldzIiLCJfdGltZSIsIl9FdmVudE1hbmFnZXIiLCJfRXZlbnRNYW5hZ2VyMiIsIl9TdG9wd2F0Y2hFdmVudCIsIl9TdG9wd2F0Y2hFdmVudDIiLCJfQmFzZVZpZXciLCJnZXRQcm90b3R5cGVPZiIsIl9wcmV2VGltZSIsIl9zZXR1cERPTVJlZnMiLCJzdG9wd2F0Y2giLCIkbWludXRlcyIsIiRzZWNvbmRzIiwiJG1pbGxpc2Vjb25kcyIsInRpbWUiLCJ0ZXh0Q29udGVudCIsIl9zdG9wd2F0Y2giLCJfRE9NRGF0YSIsIl9TdG9wd2F0Y2hDb250cm9sc1ZpZXciLCJfU3RvcHdhdGNoQ29udHJvbHNDb250cm9sbGVyIiwiX0xhcFRpbWVWaWV3IiwiX1RvdGFsVGltZVZpZXciLCJfTGFwc1RhYmxlVmlldyIsIlN0b3B3YXRjaCIsInN0b3B3YXRjaENvbnRyb2xzQ29udHJvbGxlciIsIlN0b3B3YXRjaENvbnRyb2xzQ29udHJvbGxlciIsIlN0b3B3YXRjaENvbnRyb2xzVmlldyIsIkxhcFRpbWVWaWV3IiwiVG90YWxUaW1lVmlldyIsIkxhcHNUYWJsZVZpZXciLCJfVGlja2VyIiwiX2xhcFRpbWVUaWNrZXIiLCJUaWNrZXIiLCJfdG90YWxUaW1lVGlja2VyIiwicmVjb3JkZWRMYXBzIiwiY3VycmVudExhcCIsInRvdGFsIiwic3RhcnRUaWNraW5nIiwidHJpZ2dlckV2ZW50TGlzdGVuZXJzIiwic3RvcFRpY2tpbmciLCJyZXNldCIsIl9jb3JyZWN0aW5nSW50ZXJ2YWwiLCJ0aWNrUmF0ZSIsIl90aWNrUmF0ZSIsIl9lbGFwc2VkVGltZSIsIl9pbnRlcnZhbElEIiwiX2lzVGlja2luZyIsImNhbGxiYWNrIiwiaXNUaWNraW5nIiwic2V0Q29ycmVjdGluZ0ludGVydmFsIiwiY2xlYXJDb3JyZWN0aW5nSW50ZXJ2YWwiLCJfaWQiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJnbG9iYWwiLCJmYWN0b3J5IiwiYXBwbHkiLCJwcm9wIiwibnVtSW50ZXJ2YWxzIiwiaW50ZXJ2YWxzIiwibm93IiwiRGF0ZSIsInZhbHVlT2YiLCJmdW5jIiwiZGVsYXkiLCJ0aWNrIiwiaWQiLCJwbGFubmVkIiwic2V0VGltZW91dCIsInNGdW5jIiwiZXZhbCIsImNsZWFyVGltZW91dCIsImhpZGUiLCJkaXNhYmxlZCIsIiRzdGFydEJ0biIsImdldEVsZW1lbnRCeUlkIiwiJHN0b3BCdG4iLCIkcmVzZXRCdG4iLCIkbGFwQnRuIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwiZGlzYWJsZSIsInNldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsIm1vZGVsIiwidmlldyIsInN0YXJ0IiwiaGlkZUFsbEJ0bnMiLCJzaG93U3RvcEJ0biIsInNob3dMYXBCdG4iLCJyZWNvcmRMYXAiLCJzdG9wIiwic2hvd1N0YXJ0QnRuIiwic2hvd1Jlc2V0QnRuIiwiX1RpbWVWaWV3MiIsIl9UaW1lVmlldyIsInVwZGF0ZVRpbWUiLCJfbWluaW11bUxhcFJvd3MiLCJfY3VycmVudExhcFJvd3MiLCJhZGRFbXB0eVJvd3MiLCJ1cGRhdGVSb3dzIiwicm93SFRNTCIsInJlcGxhY2UiLCJfcmVmIiwiX3RoaXMyIiwibGFwVGltZSIsImxhcEluZGV4IiwibGFwTnVtYmVyIiwidGltZVN0cmluZyIsInRpbWVIVE1MIl0sIm1hcHBpbmdzIjoiQ0FBUyxTQUFV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QVVsSyxLQUFLbUMsWUFBWWdJLFFBQVEsbUJBQW9CLElBQUlBLFFBQVEsa0JBQW1CLEdBQzVGbkssTUFBS3FDLFdBQVdDLFdBQWE0SCxFQUM3QmxLLEtBQUsrSixzQmhCNGdDVHZLLElBQUssYUFDTFUsTUFBTyxTQUFvQmtLLEdnQnpnQ0QsR0FBQUMsR0FBQXJLLEtBQWhCNkYsRUFBZ0J1RSxFQUFoQnZFLFlBQ1Y3RixNQUFLcUMsV0FBV0MsVUFBWSxHQUM1QnRDLEtBQUsrSixnQkFBa0IsRUFFdkJsRSxFQUFhcEYsUUFBUSxTQUFDNkosRUFBU0MsR0FDM0IsR0FBTUMsR0FBWUQsRUFBVyxFQUN2QjlGLEVBQU8sR0FBQWIsR0FBQTlDLEtBQVN3SixHQUNoQkcsRUFBYWhHLEVBQUs3QyxXQUNsQjhJLEVBQWNELEVBQVd4SixRQUF6QixJQUFvQ3dKLEVBQVd2SixRQUEvQyxJQUEwRHVKLEVBQVcxSixhQUNyRW1KLEVBQVVHLEVBQUtsSSxZQUNoQmdJLFFBQVEsbUJBREcsT0FDd0JLLEdBQ25DTCxRQUFRLGtCQUFtQk8sRUFFaENMLEdBQUtoSSxXQUFXQyxXQUFhNEgsRUFDN0JHLEVBQUtOLG1CQUNOL0osTUFFSEEsS0FBS2dLLG1CaEIrZ0NGeEUsR0FDVDdCLEVBQVc3QiIsImZpbGUiOiIuL2pzL2FwcC5idW5kbGUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDYpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRXZlbnQoZXZlbnQpIHtcbiAgICB2YXIgZXZlbnRUeXBlID0gdHlwZW9mIGV2ZW50ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoZXZlbnQpO1xuICAgIGlmIChldmVudFR5cGUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiUGFyYW1ldGVyICdldmVudCcgaXMgb2YgdHlwZSBcIiArIGV2ZW50VHlwZSArIFwiLiBJdCBuZWVkcyB0byBiZSBvZiB0eXBlICdzdHJpbmcnLlwiKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICB2YXIgbGlzdGVuZXJUeXBlID0gdHlwZW9mIGxpc3RlbmVyID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YobGlzdGVuZXIpO1xuICAgIGlmIChsaXN0ZW5lclR5cGUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJQYXJhbWV0ZXIgJ2xpc3RlbmVyJyBpcyBvZiB0eXBlIFwiICsgbGlzdGVuZXJUeXBlICsgXCIuIEl0IG5lZWRzIHRvIGJlIG9mIHR5cGUgJ2Z1bmN0aW9uJy5cIik7XG4gICAgfVxufVxuXG52YXIgRXZlbnRNYW5hZ2VyID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEV2ZW50TWFuYWdlcigpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEV2ZW50TWFuYWdlcik7XG5cbiAgICAgICAgLy8gRGljdGlvbmFyeSBvZiBldmVudHNcbiAgICAgICAgLy8gS2V5cyBhcmUgc3RyaW5ncyAoZXZlbnQtbmFtZXMpXG4gICAgICAgIC8vIHZhbHVlcyBhcmUgYXJyYXlzIChsaXN0ZW5lcnMpXG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIH1cblxuICAgIC8vIENoZWNrcyBpZiBhbiBldmVudCBhbHJlYWR5IGV4aXN0c1xuICAgIC8vIEBwYXJhbSAtIGV2ZW50OiBTdHJpbmdcblxuXG4gICAgX2NyZWF0ZUNsYXNzKEV2ZW50TWFuYWdlciwgW3tcbiAgICAgICAga2V5OiBcImhhc0V2ZW50XCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNFdmVudChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLl9ldmVudHNbZXZlbnRdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkcyBhIG5ldyBldmVudFxuICAgICAgICAvLyBEb2VzIG5vdGhpbmcgaWYgYW4gZXZlbnQgYnkgdGhhdCBuYW1lIGFscmVhZHkgZXhpc3RzXG4gICAgICAgIC8vIEBwYXJhbSAtIGV2ZW50OiBTdHJpbmdcbiAgICAgICAgLy8gQHRocm93cyAtIFR5cGVFcnJvclxuXG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiYWRkRXZlbnRcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEV2ZW50KGV2ZW50KSB7XG4gICAgICAgICAgICB2YWxpZGF0ZUV2ZW50KGV2ZW50KTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuaGFzRXZlbnQoZXZlbnQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9ldmVudHNbZXZlbnRdID0gW107XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1vdmVzIGEgc3BlY2lmaWMgZXZlbnRcbiAgICAgICAgLy8gRG9lcyBub3RoaW5nIGlmIHRoYXQgZXZlbnQgZG9lc24ndCBleGlzdFxuICAgICAgICAvLyBAcGFyYW0gLSBldmVudDogU3RyaW5nXG4gICAgICAgIC8vIEB0aHJvd3MgLSBUeXBlRXJyb3JcblxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInJlbW92ZUV2ZW50XCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVFdmVudChldmVudCkge1xuICAgICAgICAgICAgdmFsaWRhdGVFdmVudChldmVudCk7XG5cbiAgICAgICAgICAgIC8vIFRPRE86IFJlbW92ZSB0aGUgZXZlbnRcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkZCBhbiBldmVudC1saXN0ZW5lciBmb3IgYSBzcGVjaWZpYyBldmVudFxuICAgICAgICAvLyBDcmVhdGVzIHRoZSBldmVudCBpZiBpdCBkb2Vzbid0IGFscmVhZHkgZXhpc3RcbiAgICAgICAgLy8gQHBhcmFtIC0gZXZlbnQ6IFN0cmluZ1xuICAgICAgICAvLyBAcGFyYW0gLSBsaXN0ZW5lcjogRnVuY3Rpb25cbiAgICAgICAgLy8gQHRocm93cyAtIFR5cGVFcnJvclxuXG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiYWRkRXZlbnRMaXN0ZW5lclwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHZhbGlkYXRlTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgICAgICAgICAgdGhpcy5hZGRFdmVudChldmVudCk7XG4gICAgICAgICAgICB0aGlzLl9ldmVudHNbZXZlbnRdLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVtb3ZlcyBhbiBldmVudC1saXN0ZW5lciBmcm9tIGFuIGV2ZW50XG4gICAgICAgIC8vIERvZXMgbm90aGluZyBpZiBhbiBldmVudCBkb2Vzbid0IGV4aXN0IHRvIHJlbW92ZVxuICAgICAgICAvLyBAcGFyYW0gLSBldmVudDogU3RyaW5nXG4gICAgICAgIC8vIEBwYXJhbSAtIGxpc3RlbmVyOiBGdW5jdGlvblxuICAgICAgICAvLyBAdGhyb3dzIC0gVHlwZUVycm9yXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJyZW1vdmVFdmVudExpc3RlbmVyXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICAgICAgdmFsaWRhdGVFdmVudChldmVudCk7XG4gICAgICAgICAgICB2YWxpZGF0ZUxpc3RlbmVyKGxpc3RlbmVyKTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLmhhc0V2ZW50KGV2ZW50KSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkNhbid0IHJlbW92ZSB0aGUgZXZlbnQgbGlzdGVuZXIgYmVjYXVzZSBpdCBkb2VzIG5vdCBleGlzdCFcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUT0RPOiBGaW5kIHRoZSBsaXN0ZW5lciBhbmQgcmVtb3ZlIGl0XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUcmlnZ2VycyBldmVudC1saXN0ZW5lcnMgZm9yIGFuIGV2ZW50IHdpdGggYSBzdWJqZWN0XG4gICAgICAgIC8vIERvZXMgbm90aGluZyBpZiBldmVudCBkb2VzIG5vdCBleGlzdFxuICAgICAgICAvLyBAcGFyYW0gLSBldmVudDogU3RyaW5nXG4gICAgICAgIC8vIEBwYXJhbSAtIGRhdGE6IE9iamVjdFxuICAgICAgICAvLyBAdGhyb3dzIC0gVHlwZUVycm9yXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJ0cmlnZ2VyRXZlbnRMaXN0ZW5lcnNcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRyaWdnZXJFdmVudExpc3RlbmVycyhldmVudCwgZGF0YSkge1xuICAgICAgICAgICAgdmFsaWRhdGVFdmVudChldmVudCk7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5oYXNFdmVudChldmVudCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2V2ZW50c1tldmVudF0uZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcihkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEV2ZW50TWFuYWdlcjtcbn0oKTtcblxuLy8gVE9ETzogVXNlIHRoZSBuZXdlciBFQ01BIGV4cG9ydCBtZXRob2RzXG5cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgRXZlbnRNYW5hZ2VyKCk7XG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICB1cGRhdGVDdXJyZW50TGFwVGltZTogXCJ1cGRhdGVDdXJyZW50TGFwVGltZVwiLFxuICAgIHVwZGF0ZVRvdGFsVGltZTogXCJ1cGRhdGVUb3RhbFRpbWVcIixcbiAgICB1cGRhdGVSZWNvcmRlZExhcHM6IFwidXBkYXRlUmVjb3JkZWRMYXBzXCIsXG4gICAgc3RvcHdhdGNoRGlkUmVzZXQ6IFwic3RvcHdhdGNoRGlkUmVzZXRcIlxufTtcblxuLyoqKi8gfSksXG4vKiAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFRpbWUgPSBleHBvcnRzLlRpbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGltZShtaWxsaXNlY29uZHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRpbWUpO1xuXG4gICAgICAgIHRoaXMudG90YWxNaWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZHM7XG4gICAgICAgIHRoaXMubWludXRlcyA9IDA7XG4gICAgICAgIHRoaXMuc2Vjb25kcyA9IDA7XG4gICAgICAgIHRoaXMubWlsbGlzZWNvbmRzID0gMDtcblxuICAgICAgICB0aGlzLl9wb3B1bGF0ZVRpbWVEYXRhKCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFRpbWUsIFt7XG4gICAgICAgIGtleTogXCJfcG9wdWxhdGVUaW1lRGF0YVwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3BvcHVsYXRlVGltZURhdGEoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgTVNDT05WRVJTSU9OUyA9IFs2MDAwMCwgMTAwMCwgMV07XG4gICAgICAgICAgICB2YXIgZGlmZiA9IFtdO1xuXG4gICAgICAgICAgICBNU0NPTlZFUlNJT05TLmZvckVhY2goZnVuY3Rpb24gKHVuaXQsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpZmZbMF0gPSBNYXRoLmZsb29yKF90aGlzLnRvdGFsTWlsbGlzZWNvbmRzIC8gdW5pdCk7XG4gICAgICAgICAgICAgICAgICAgIGRpZmZbMV0gPSBfdGhpcy50b3RhbE1pbGxpc2Vjb25kcyAlIE1TQ09OVkVSU0lPTlNbMF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcmVtYWluZGVyID0gZGlmZltkaWZmLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgICAgICAgICAgZGlmZltkaWZmLmxlbmd0aCAtIDFdID0gTWF0aC5mbG9vcihyZW1haW5kZXIgLyB1bml0KTtcblxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gTVNDT05WRVJTSU9OUy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkaWZmW2RpZmYubGVuZ3RoXSA9IHJlbWFpbmRlciAlIHVuaXQ7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5taW51dGVzID0gZGlmZlswXTtcbiAgICAgICAgICAgIHRoaXMuc2Vjb25kcyA9IGRpZmZbMV07XG4gICAgICAgICAgICB0aGlzLm1pbGxpc2Vjb25kcyA9IGRpZmZbMl07XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJ0b1N0cmluZ1wiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgICAgICB2YXIgbWludXRlcyA9IHRoaXMubWludXRlcyA8IDEwID8gXCIwXCIgKyB0aGlzLm1pbnV0ZXMgOiB0aGlzLm1pbnV0ZXM7XG4gICAgICAgICAgICB2YXIgc2Vjb25kcyA9IHRoaXMuc2Vjb25kcyA8IDEwID8gXCIwXCIgKyB0aGlzLnNlY29uZHMgOiB0aGlzLnNlY29uZHM7XG4gICAgICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gKHRoaXMubWlsbGlzZWNvbmRzIDwgMTAgPyBcIjBcIiArIHRoaXMubWlsbGlzZWNvbmRzIDogdGhpcy5taWxsaXNlY29uZHMudG9TdHJpbmcoKSkuc3Vic3RyaW5nKDAsIDIpO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1pbnV0ZXM6IG1pbnV0ZXMsXG4gICAgICAgICAgICAgICAgc2Vjb25kczogc2Vjb25kcyxcbiAgICAgICAgICAgICAgICBtaWxsaXNlY29uZHM6IG1pbGxpc2Vjb25kc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBUaW1lO1xufSgpO1xuXG4vKioqLyB9KSxcbi8qIDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5CYXNlVmlldyA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9ET01EYXRhID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEJhc2VWaWV3ID0gZXhwb3J0cy5CYXNlVmlldyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCYXNlVmlldyhET01EYXRhKSB7XG4gICAgICAgIHZhciBjb250cm9sbGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuXG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCYXNlVmlldyk7XG5cbiAgICAgICAgdGhpcy5pbml0aWFsSFRNTCA9IERPTURhdGEuaHRtbDtcblxuICAgICAgICB0aGlzLiRjb250YWluZXIgPSBET01EYXRhLiRjb250YWluZXI7XG4gICAgICAgIHRoaXMuJGNvbnRhaW5lci5pbm5lckhUTUwgPSB0aGlzLmluaXRpYWxIVE1MO1xuXG4gICAgICAgIHRoaXMuY2xhc3NOYW1lcyA9IHt9O1xuXG4gICAgICAgIHRoaXMuY29udHJvbGxlciA9IGNvbnRyb2xsZXI7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogQWRkIHZhbGlkYXRpb24gZm9yIHBhcmFtZXRlcnNcblxuXG4gICAgX2NyZWF0ZUNsYXNzKEJhc2VWaWV3LCBbe1xuICAgICAgICBrZXk6IFwiYWRkRXZlbnRMaXN0ZW5lclwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcigkZWwsIGV2ZW50VHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgICAgICRlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgdGhpcy5jb250cm9sbGVyW2xpc3RlbmVyXS5iaW5kKHRoaXMuY29udHJvbGxlciwgdGhpcyksIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBCYXNlVmlldztcbn0oKTtcblxuLyoqKi8gfSksXG4vKiA0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIERPTURhdGEgPSBleHBvcnRzLkRPTURhdGEgPSBmdW5jdGlvbiBET01EYXRhKGNvbnRhaW5lclNlbGVjdG9yLCB0ZW1wbGF0ZVNlbGVjdG9yKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERPTURhdGEpO1xuXG4gICAgdGhpcy4kY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXJTZWxlY3Rvcik7XG4gICAgdGhpcy5odG1sID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0ZW1wbGF0ZVNlbGVjdG9yKS5pbm5lckhUTUw7XG59O1xuXG4vKioqLyB9KSxcbi8qIDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5UaW1lVmlldyA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9CYXNlVmlldzIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG52YXIgX3RpbWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX0V2ZW50TWFuYWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfRXZlbnRNYW5hZ2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0V2ZW50TWFuYWdlcik7XG5cbnZhciBfU3RvcHdhdGNoRXZlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG52YXIgX1N0b3B3YXRjaEV2ZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N0b3B3YXRjaEV2ZW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgVGltZVZpZXcgPSBleHBvcnRzLlRpbWVWaWV3ID0gZnVuY3Rpb24gKF9CYXNlVmlldykge1xuICAgIF9pbmhlcml0cyhUaW1lVmlldywgX0Jhc2VWaWV3KTtcblxuICAgIGZ1bmN0aW9uIFRpbWVWaWV3KERPTURhdGEpIHtcbiAgICAgICAgdmFyIGNvbnRyb2xsZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG51bGw7XG5cbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRpbWVWaWV3KTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVGltZVZpZXcuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihUaW1lVmlldykpLmNhbGwodGhpcywgRE9NRGF0YSwgY29udHJvbGxlcikpO1xuXG4gICAgICAgIF90aGlzLl9wcmV2VGltZSA9IG5ldyBfdGltZS5UaW1lKDApO1xuICAgICAgICBfdGhpcy5fc2V0dXBET01SZWZzKCk7XG5cbiAgICAgICAgX0V2ZW50TWFuYWdlcjIuZGVmYXVsdC5hZGRFdmVudExpc3RlbmVyKF9TdG9wd2F0Y2hFdmVudDIuZGVmYXVsdC5zdG9wd2F0Y2hEaWRSZXNldCwgZnVuY3Rpb24gKHN0b3B3YXRjaCkge1xuICAgICAgICAgICAgX3RoaXMuJGNvbnRhaW5lci5pbm5lckhUTUwgPSBfdGhpcy5pbml0aWFsSFRNTDtcbiAgICAgICAgICAgIF90aGlzLl9zZXR1cERPTVJlZnMoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoVGltZVZpZXcsIFt7XG4gICAgICAgIGtleTogXCJfc2V0dXBET01SZWZzXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXBET01SZWZzKCkge1xuICAgICAgICAgICAgdGhpcy4kbWludXRlcyA9IHRoaXMuJGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiLm1pbnV0ZXNcIik7XG4gICAgICAgICAgICB0aGlzLiRzZWNvbmRzID0gdGhpcy4kY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIuc2Vjb25kc1wiKTtcbiAgICAgICAgICAgIHRoaXMuJG1pbGxpc2Vjb25kcyA9IHRoaXMuJGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiLm1pbGxpc2Vjb25kc1wiKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInVwZGF0ZVRpbWVcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVRpbWUodGltZSkge1xuICAgICAgICAgICAgaWYgKHRpbWUubWludXRlcyAhPT0gdGhpcy5fcHJldlRpbWUubWludXRlcykge1xuICAgICAgICAgICAgICAgIHRoaXMuJG1pbnV0ZXMudGV4dENvbnRlbnQgPSB0aW1lLnRvU3RyaW5nKCkubWludXRlcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRpbWUuc2Vjb25kcyAhPT0gdGhpcy5fcHJldlRpbWUuc2Vjb25kcykge1xuICAgICAgICAgICAgICAgIHRoaXMuJHNlY29uZHMudGV4dENvbnRlbnQgPSB0aW1lLnRvU3RyaW5nKCkuc2Vjb25kcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRpbWUubWlsbGlzZWNvbmRzICE9PSB0aGlzLl9wcmV2VGltZS5taWxsaXNlY29uZHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRtaWxsaXNlY29uZHMudGV4dENvbnRlbnQgPSB0aW1lLnRvU3RyaW5nKCkubWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9wcmV2VGltZSA9IHRpbWU7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVGltZVZpZXc7XG59KF9CYXNlVmlldzIuQmFzZVZpZXcpO1xuXG4vKioqLyB9KSxcbi8qIDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblxudmFyIF9zdG9wd2F0Y2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXG52YXIgX0RPTURhdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG52YXIgX1N0b3B3YXRjaENvbnRyb2xzVmlldyA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXG52YXIgX1N0b3B3YXRjaENvbnRyb2xzQ29udHJvbGxlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXG52YXIgX0xhcFRpbWVWaWV3ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG5cbnZhciBfVG90YWxUaW1lVmlldyA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xuXG52YXIgX0xhcHNUYWJsZVZpZXcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcblxudmFyIHN0b3B3YXRjaCA9IG5ldyBfc3RvcHdhdGNoLlN0b3B3YXRjaCgpO1xuXG52YXIgc3RvcHdhdGNoQ29udHJvbHNDb250cm9sbGVyID0gbmV3IF9TdG9wd2F0Y2hDb250cm9sc0NvbnRyb2xsZXIuU3RvcHdhdGNoQ29udHJvbHNDb250cm9sbGVyKHN0b3B3YXRjaCk7XG52YXIgc3RvcHdhdGNoQ29udHJvbHNWaWV3ID0gbmV3IF9TdG9wd2F0Y2hDb250cm9sc1ZpZXcuU3RvcHdhdGNoQ29udHJvbHNWaWV3KG5ldyBfRE9NRGF0YS5ET01EYXRhKFwiLmNvbnRyb2xzXCIsIFwiI3N0b3B3YXRjaENvbnRyb2xzXCIpLCBzdG9wd2F0Y2hDb250cm9sc0NvbnRyb2xsZXIpO1xuXG52YXIgbGFwVGltZVZpZXcgPSBuZXcgX0xhcFRpbWVWaWV3LkxhcFRpbWVWaWV3KG5ldyBfRE9NRGF0YS5ET01EYXRhKFwiLmxhcENvdW50XCIsIFwiI3N0b3B3YXRjaExhcFRpbWVcIikpO1xuXG52YXIgdG90YWxUaW1lVmlldyA9IG5ldyBfVG90YWxUaW1lVmlldy5Ub3RhbFRpbWVWaWV3KG5ldyBfRE9NRGF0YS5ET01EYXRhKFwiLnRvdGFsQ291bnRcIiwgXCIjc3RvcHdhdGNoVG90YWxUaW1lXCIpKTtcblxudmFyIGxhcHNUYWJsZVZpZXcgPSBuZXcgX0xhcHNUYWJsZVZpZXcuTGFwc1RhYmxlVmlldyhuZXcgX0RPTURhdGEuRE9NRGF0YShcIi5sYXBzVGFibGVcIiwgXCIjc3RvcHdhdGNoTGFwc1RhYmxlUm93XCIpKTtcblxuLyoqKi8gfSksXG4vKiA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cbi8qKiovIH0pLFxuLyogOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlN0b3B3YXRjaCA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9UaWNrZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXG52YXIgX0V2ZW50TWFuYWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfRXZlbnRNYW5hZ2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0V2ZW50TWFuYWdlcik7XG5cbnZhciBfU3RvcHdhdGNoRXZlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG52YXIgX1N0b3B3YXRjaEV2ZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N0b3B3YXRjaEV2ZW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFN0b3B3YXRjaCA9IGV4cG9ydHMuU3RvcHdhdGNoID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN0b3B3YXRjaCgpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0b3B3YXRjaCk7XG5cbiAgICAgICAgdGhpcy5fbGFwVGltZVRpY2tlciA9IG5ldyBfVGlja2VyLlRpY2tlcigpO1xuICAgICAgICB0aGlzLl90b3RhbFRpbWVUaWNrZXIgPSBuZXcgX1RpY2tlci5UaWNrZXIoKTtcbiAgICAgICAgdGhpcy5yZWNvcmRlZExhcHMgPSBbXTtcblxuICAgICAgICB0aGlzLnRpbWUgPSB7XG4gICAgICAgICAgICBjdXJyZW50TGFwOiB0aGlzLl9sYXBUaW1lVGlja2VyLnRpbWUsXG4gICAgICAgICAgICB0b3RhbDogdGhpcy5fdG90YWxUaW1lVGlja2VyLnRpbWVcbiAgICAgICAgfTtcblxuICAgICAgICBmb3IgKHZhciBldmVudCBpbiBfU3RvcHdhdGNoRXZlbnQyLmRlZmF1bHQpIHtcbiAgICAgICAgICAgIGlmIChfU3RvcHdhdGNoRXZlbnQyLmRlZmF1bHQuaGFzT3duUHJvcGVydHkoZXZlbnQpKSB7XG4gICAgICAgICAgICAgICAgX0V2ZW50TWFuYWdlcjIuZGVmYXVsdC5hZGRFdmVudChfU3RvcHdhdGNoRXZlbnQyLmRlZmF1bHRbZXZlbnRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhTdG9wd2F0Y2gsIFt7XG4gICAgICAgIGtleTogXCJzdGFydFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLl9sYXBUaW1lVGlja2VyLnN0YXJ0VGlja2luZyhmdW5jdGlvbiAodGltZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnRpbWUuY3VycmVudExhcCA9IHRpbWU7XG4gICAgICAgICAgICAgICAgX0V2ZW50TWFuYWdlcjIuZGVmYXVsdC50cmlnZ2VyRXZlbnRMaXN0ZW5lcnMoX1N0b3B3YXRjaEV2ZW50Mi5kZWZhdWx0LnVwZGF0ZUN1cnJlbnRMYXBUaW1lLCBfdGhpcyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5fdG90YWxUaW1lVGlja2VyLnN0YXJ0VGlja2luZyhmdW5jdGlvbiAodGltZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnRpbWUudG90YWwgPSB0aW1lO1xuICAgICAgICAgICAgICAgIF9FdmVudE1hbmFnZXIyLmRlZmF1bHQudHJpZ2dlckV2ZW50TGlzdGVuZXJzKF9TdG9wd2F0Y2hFdmVudDIuZGVmYXVsdC51cGRhdGVUb3RhbFRpbWUsIF90aGlzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwic3RvcFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgICAgICAgIHRoaXMuX2xhcFRpbWVUaWNrZXIuc3RvcFRpY2tpbmcoKTtcbiAgICAgICAgICAgIHRoaXMuX3RvdGFsVGltZVRpY2tlci5zdG9wVGlja2luZygpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwicmVzZXRcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgICAgICAgdGhpcy5fbGFwVGltZVRpY2tlci5yZXNldCgpO1xuICAgICAgICAgICAgdGhpcy5fdG90YWxUaW1lVGlja2VyLnJlc2V0KCk7XG4gICAgICAgICAgICB0aGlzLnJlY29yZGVkTGFwcyA9IFtdO1xuICAgICAgICAgICAgX0V2ZW50TWFuYWdlcjIuZGVmYXVsdC50cmlnZ2VyRXZlbnRMaXN0ZW5lcnMoX1N0b3B3YXRjaEV2ZW50Mi5kZWZhdWx0LnN0b3B3YXRjaERpZFJlc2V0LCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInJlY29yZExhcFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVjb3JkTGFwKCkge1xuICAgICAgICAgICAgdGhpcy5yZWNvcmRlZExhcHMucHVzaCh0aGlzLl9sYXBUaW1lVGlja2VyLnRpbWUpO1xuICAgICAgICAgICAgX0V2ZW50TWFuYWdlcjIuZGVmYXVsdC50cmlnZ2VyRXZlbnRMaXN0ZW5lcnMoX1N0b3B3YXRjaEV2ZW50Mi5kZWZhdWx0LnVwZGF0ZVJlY29yZGVkTGFwcywgdGhpcyk7XG5cbiAgICAgICAgICAgIHRoaXMuX2xhcFRpbWVUaWNrZXIucmVzZXQoKTtcbiAgICAgICAgICAgIHRoaXMudGltZS5jdXJyZW50TGFwID0gdGhpcy5fbGFwVGltZVRpY2tlci50aW1lO1xuICAgICAgICAgICAgX0V2ZW50TWFuYWdlcjIuZGVmYXVsdC50cmlnZ2VyRXZlbnRMaXN0ZW5lcnMoX1N0b3B3YXRjaEV2ZW50Mi5kZWZhdWx0LnVwZGF0ZUN1cnJlbnRMYXBUaW1lLCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBTdG9wd2F0Y2g7XG59KCk7XG5cbi8qKiovIH0pLFxuLyogOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlRpY2tlciA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2NvcnJlY3RpbmdJbnRlcnZhbCA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUNhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgdmFyIGNhbGxiYWNrVHlwZSA9IHR5cGVvZiBjYWxsYmFjayA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGNhbGxiYWNrKTtcbiAgICBpZiAoY2FsbGJhY2tUeXBlICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiUGFyYW1ldGVyICdjYWxsYmFjaycgaXMgb2YgdHlwZSBcIiArIGNhbGxiYWNrVHlwZSArIFwiLiBJdCBuZWVkcyB0byBiZSBvZiB0eXBlICdmdW5jdGlvbicuXCIpO1xuICAgIH1cbn1cblxudmFyIFRpY2tlciA9IGV4cG9ydHMuVGlja2VyID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRpY2tlcigpIHtcbiAgICAgICAgdmFyIHRpY2tSYXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAxMDtcblxuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGlja2VyKTtcblxuICAgICAgICB0aGlzLl90aWNrUmF0ZSA9IHRpY2tSYXRlOyAvLyBJbiBtaWxsaXNlY29uZHNcbiAgICAgICAgdGhpcy5fZWxhcHNlZFRpbWUgPSAwOyAvLyBJbiBtaWxsaXNlY29uZHNcbiAgICAgICAgdGhpcy5faW50ZXJ2YWxJRCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2lzVGlja2luZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhUaWNrZXIsIFt7XG4gICAgICAgIGtleTogXCJzdGFydFRpY2tpbmdcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXJ0VGlja2luZyhjYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAgICAgaWYgKHRoaXMuaXNUaWNraW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9pbnRlcnZhbElEID0gKDAsIF9jb3JyZWN0aW5nSW50ZXJ2YWwuc2V0Q29ycmVjdGluZ0ludGVydmFsKShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2VsYXBzZWRUaW1lICs9IF90aGlzLl90aWNrUmF0ZTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhfdGhpcy50aW1lKTtcbiAgICAgICAgICAgIH0sIHRoaXMuX3RpY2tSYXRlKTtcblxuICAgICAgICAgICAgdGhpcy5faXNUaWNraW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInN0b3BUaWNraW5nXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wVGlja2luZygpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5faXNUaWNraW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAoMCwgX2NvcnJlY3RpbmdJbnRlcnZhbC5jbGVhckNvcnJlY3RpbmdJbnRlcnZhbCkodGhpcy5faW50ZXJ2YWxJRCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2lkID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX2lzVGlja2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwicmVzZXRcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgICAgICAgdGhpcy5fZWxhcHNlZFRpbWUgPSAwO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwidGltZVwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9lbGFwc2VkVGltZTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBUaWNrZXI7XG59KCk7XG5cbi8qKiovIH0pLFxuLyogMTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187LyohIGNvcnJlY3RpbmctaW50ZXJ2YWwgMi4wLjAgfCBDb3B5cmlnaHQgMjAxNCBBbmRyZXcgRHV0aGllIHwgTUlUIExpY2Vuc2UgKi9cbi8qIGpzaGludCBldmlsOiB0cnVlICovXG47KGZ1bmN0aW9uKGdsb2JhbCwgZmFjdG9yeSkge1xuICAvLyBVc2UgVU1EIHBhdHRlcm4gdG8gZXhwb3NlIGV4cG9ydGVkIGZ1bmN0aW9uc1xuICBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgLy8gRXhwb3NlIHRvIE5vZGUuanNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIGlmICh0cnVlKSB7XG4gICAgLy8gRXhwb3NlIHRvIFJlcXVpcmVKU1xuICAgICEoX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFtdLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPSAoZmFjdG9yeSksXG5cdFx0XHRcdF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gKHR5cGVvZiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPT09ICdmdW5jdGlvbicgP1xuXHRcdFx0XHQoX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLmFwcGx5KGV4cG9ydHMsIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pKSA6IF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyksXG5cdFx0XHRcdF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fICE9PSB1bmRlZmluZWQgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pKTtcbiAgfVxuXG4gIC8vIEV4cG9zZSB0byBnbG9iYWwgb2JqZWN0IChsaWtlbHkgYnJvd3NlciB3aW5kb3cpXG4gIHZhciBleHBvcnRzID0gZmFjdG9yeSgpO1xuICBmb3IgKHZhciBwcm9wIGluIGV4cG9ydHMpIHtcbiAgICBnbG9iYWxbcHJvcF0gPSBleHBvcnRzW3Byb3BdO1xuICB9XG59KHRoaXMsIGZ1bmN0aW9uKCkge1xuICAvLyBUcmFjayBydW5uaW5nIGludGVydmFsc1xuICB2YXIgbnVtSW50ZXJ2YWxzID0gMCxcbiAgICBpbnRlcnZhbHMgPSB7fTtcblxuICAvLyBQb2x5ZmlsbCBEYXRlLm5vd1xuICB2YXIgbm93ID0gRGF0ZS5ub3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKCkudmFsdWVPZigpO1xuICB9O1xuXG4gIHZhciBzZXRDb3JyZWN0aW5nSW50ZXJ2YWwgPSBmdW5jdGlvbihmdW5jLCBkZWxheSkge1xuICAgIHZhciBpZCA9IG51bUludGVydmFscysrLFxuICAgICAgcGxhbm5lZCA9IG5vdygpICsgZGVsYXk7XG5cbiAgICAvLyBOb3JtYWxpemUgZnVuYyBhcyBmdW5jdGlvblxuICAgIHN3aXRjaCAodHlwZW9mIGZ1bmMpIHtcbiAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICB2YXIgc0Z1bmMgPSBmdW5jO1xuICAgICAgICBmdW5jID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZXZhbChzRnVuYyk7XG4gICAgICAgIH07XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZnVuYyA9IGZ1bmN0aW9uKCkgeyB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRpY2soKSB7XG4gICAgICBmdW5jKCk7XG5cbiAgICAgIC8vIE9ubHkgcmUtcmVnaXN0ZXIgaWYgY2xlYXJDb3JyZWN0aW5nSW50ZXJ2YWwgd2FzIG5vdCBjYWxsZWQgZHVyaW5nIGZ1bmN0aW9uXG4gICAgICBpZiAoaW50ZXJ2YWxzW2lkXSkge1xuICAgICAgICBwbGFubmVkICs9IGRlbGF5O1xuICAgICAgICBpbnRlcnZhbHNbaWRdID0gc2V0VGltZW91dCh0aWNrLCBwbGFubmVkIC0gbm93KCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGludGVydmFsc1tpZF0gPSBzZXRUaW1lb3V0KHRpY2ssIGRlbGF5KTtcbiAgICByZXR1cm4gaWQ7XG4gIH07XG5cbiAgdmFyIGNsZWFyQ29ycmVjdGluZ0ludGVydmFsID0gZnVuY3Rpb24oaWQpIHtcbiAgICBjbGVhclRpbWVvdXQoaW50ZXJ2YWxzW2lkXSk7XG4gICAgZGVsZXRlIGludGVydmFsc1tpZF07XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRDb3JyZWN0aW5nSW50ZXJ2YWw6IHNldENvcnJlY3RpbmdJbnRlcnZhbCxcbiAgICBjbGVhckNvcnJlY3RpbmdJbnRlcnZhbDogY2xlYXJDb3JyZWN0aW5nSW50ZXJ2YWxcbiAgfTtcbn0pKTtcblxuLyoqKi8gfSksXG4vKiAxMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlN0b3B3YXRjaENvbnRyb2xzVmlldyA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9CYXNlVmlldzIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTdG9wd2F0Y2hDb250cm9sc1ZpZXcgPSBleHBvcnRzLlN0b3B3YXRjaENvbnRyb2xzVmlldyA9IGZ1bmN0aW9uIChfQmFzZVZpZXcpIHtcbiAgICBfaW5oZXJpdHMoU3RvcHdhdGNoQ29udHJvbHNWaWV3LCBfQmFzZVZpZXcpO1xuXG4gICAgZnVuY3Rpb24gU3RvcHdhdGNoQ29udHJvbHNWaWV3KERPTURhdGEsIGNvbnRyb2xsZXIpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0b3B3YXRjaENvbnRyb2xzVmlldyk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFN0b3B3YXRjaENvbnRyb2xzVmlldy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFN0b3B3YXRjaENvbnRyb2xzVmlldykpLmNhbGwodGhpcywgRE9NRGF0YSwgY29udHJvbGxlcikpO1xuXG4gICAgICAgIF90aGlzLmNsYXNzTmFtZXMuaGlkZSA9IFwiaGlkZGVuXCI7XG4gICAgICAgIF90aGlzLmNsYXNzTmFtZXMuZGlzYWJsZWQgPSBcImRpc2FibGVkXCI7XG5cbiAgICAgICAgX3RoaXMuJHN0YXJ0QnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdGFydEJ0blwiKTtcbiAgICAgICAgX3RoaXMuJHN0b3BCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0b3BCdG5cIik7XG4gICAgICAgIF90aGlzLiRyZXNldEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzZXRCdG5cIik7XG4gICAgICAgIF90aGlzLiRsYXBCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxhcEJ0blwiKTtcblxuICAgICAgICBfdGhpcy5hZGRFdmVudExpc3RlbmVyKF90aGlzLiRzdGFydEJ0biwgXCJjbGlja1wiLCBcImhhbmRsZUNsaWNrU3RhcnRCdXR0b25cIik7XG4gICAgICAgIF90aGlzLmFkZEV2ZW50TGlzdGVuZXIoX3RoaXMuJGxhcEJ0biwgXCJjbGlja1wiLCBcImhhbmRsZUNsaWNrTGFwQnV0dG9uXCIpO1xuICAgICAgICBfdGhpcy5hZGRFdmVudExpc3RlbmVyKF90aGlzLiRzdG9wQnRuLCBcImNsaWNrXCIsIFwiaGFuZGxlQ2xpY2tTdG9wQnV0dG9uXCIpO1xuICAgICAgICBfdGhpcy5hZGRFdmVudExpc3RlbmVyKF90aGlzLiRyZXNldEJ0biwgXCJjbGlja1wiLCBcImhhbmRsZUNsaWNrUmVzZXRCdXR0b25cIik7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoU3RvcHdhdGNoQ29udHJvbHNWaWV3LCBbe1xuICAgICAgICBrZXk6IFwiaGlkZUFsbEJ0bnNcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGVBbGxCdG5zKCkge1xuICAgICAgICAgICAgdGhpcy4kc3RhcnRCdG4uY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZXMuaGlkZSk7XG4gICAgICAgICAgICB0aGlzLiRsYXBCdG4uY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZXMuaGlkZSk7XG4gICAgICAgICAgICB0aGlzLiRzdG9wQnRuLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc05hbWVzLmhpZGUpO1xuICAgICAgICAgICAgdGhpcy4kcmVzZXRCdG4uY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZXMuaGlkZSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwic2hvd1N0YXJ0QnRuXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzaG93U3RhcnRCdG4oKSB7XG4gICAgICAgICAgICB0aGlzLiRzdGFydEJ0bi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuY2xhc3NOYW1lcy5oaWRlKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwic2hvd0xhcEJ0blwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2hvd0xhcEJ0bigpIHtcbiAgICAgICAgICAgIHZhciBkaXNhYmxlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0cnVlO1xuXG4gICAgICAgICAgICB0aGlzLiRsYXBCdG4uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzTmFtZXMuaGlkZSk7XG5cbiAgICAgICAgICAgIGlmIChkaXNhYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kbGFwQnRuLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc05hbWVzLmRpc2FibGVkKTtcbiAgICAgICAgICAgICAgICB0aGlzLiRsYXBCdG4uc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRsYXBCdG4uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzTmFtZXMuZGlzYWJsZWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuJGxhcEJ0bi5yZW1vdmVBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJzaG93U3RvcEJ0blwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2hvd1N0b3BCdG4oKSB7XG4gICAgICAgICAgICB0aGlzLiRzdG9wQnRuLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5jbGFzc05hbWVzLmhpZGUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJzaG93UmVzZXRCdG5cIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNob3dSZXNldEJ0bigpIHtcbiAgICAgICAgICAgIHRoaXMuJHJlc2V0QnRuLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5jbGFzc05hbWVzLmhpZGUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gU3RvcHdhdGNoQ29udHJvbHNWaWV3O1xufShfQmFzZVZpZXcyLkJhc2VWaWV3KTtcblxuLyoqKi8gfSksXG4vKiAxMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlN0b3B3YXRjaENvbnRyb2xzQ29udHJvbGxlciA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9FdmVudE1hbmFnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX0V2ZW50TWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9FdmVudE1hbmFnZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgU3RvcHdhdGNoQ29udHJvbHNDb250cm9sbGVyID0gZXhwb3J0cy5TdG9wd2F0Y2hDb250cm9sc0NvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3RvcHdhdGNoQ29udHJvbHNDb250cm9sbGVyKG1vZGVsKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdG9wd2F0Y2hDb250cm9sc0NvbnRyb2xsZXIpO1xuXG4gICAgICAgIHRoaXMuc3RvcHdhdGNoID0gbW9kZWw7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFN0b3B3YXRjaENvbnRyb2xzQ29udHJvbGxlciwgW3tcbiAgICAgICAga2V5OiBcImhhbmRsZUNsaWNrU3RhcnRCdXR0b25cIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUNsaWNrU3RhcnRCdXR0b24odmlldywgZXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcHdhdGNoLnN0YXJ0KCk7XG4gICAgICAgICAgICB2aWV3LmhpZGVBbGxCdG5zKCkuc2hvd1N0b3BCdG4oKS5zaG93TGFwQnRuKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImhhbmRsZUNsaWNrTGFwQnV0dG9uXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVDbGlja0xhcEJ1dHRvbih2aWV3LCBldmVudCkge1xuICAgICAgICAgICAgdGhpcy5zdG9wd2F0Y2gucmVjb3JkTGFwKCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJoYW5kbGVDbGlja1N0b3BCdXR0b25cIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUNsaWNrU3RvcEJ1dHRvbih2aWV3LCBldmVudCkge1xuICAgICAgICAgICAgdGhpcy5zdG9wd2F0Y2guc3RvcCgpO1xuICAgICAgICAgICAgdmlldy5oaWRlQWxsQnRucygpLnNob3dTdGFydEJ0bigpLnNob3dSZXNldEJ0bigpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiaGFuZGxlQ2xpY2tSZXNldEJ1dHRvblwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlQ2xpY2tSZXNldEJ1dHRvbih2aWV3LCBldmVudCkge1xuICAgICAgICAgICAgdGhpcy5zdG9wd2F0Y2gucmVzZXQoKTtcbiAgICAgICAgICAgIHZpZXcuaGlkZUFsbEJ0bnMoKS5zaG93U3RhcnRCdG4oKS5zaG93TGFwQnRuKCk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gU3RvcHdhdGNoQ29udHJvbHNDb250cm9sbGVyO1xufSgpO1xuXG4vKioqLyB9KSxcbi8qIDEzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuTGFwVGltZVZpZXcgPSB1bmRlZmluZWQ7XG5cbnZhciBfVGltZVZpZXcyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxudmFyIF90aW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxudmFyIF9FdmVudE1hbmFnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX0V2ZW50TWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9FdmVudE1hbmFnZXIpO1xuXG52YXIgX1N0b3B3YXRjaEV2ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxudmFyIF9TdG9wd2F0Y2hFdmVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdG9wd2F0Y2hFdmVudCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIExhcFRpbWVWaWV3ID0gZXhwb3J0cy5MYXBUaW1lVmlldyA9IGZ1bmN0aW9uIChfVGltZVZpZXcpIHtcbiAgICBfaW5oZXJpdHMoTGFwVGltZVZpZXcsIF9UaW1lVmlldyk7XG5cbiAgICBmdW5jdGlvbiBMYXBUaW1lVmlldyhET01EYXRhKSB7XG4gICAgICAgIHZhciBjb250cm9sbGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuXG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMYXBUaW1lVmlldyk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKExhcFRpbWVWaWV3Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTGFwVGltZVZpZXcpKS5jYWxsKHRoaXMsIERPTURhdGEsIGNvbnRyb2xsZXIpKTtcblxuICAgICAgICBfRXZlbnRNYW5hZ2VyMi5kZWZhdWx0LmFkZEV2ZW50TGlzdGVuZXIoX1N0b3B3YXRjaEV2ZW50Mi5kZWZhdWx0LnVwZGF0ZUN1cnJlbnRMYXBUaW1lLCBmdW5jdGlvbiAoc3RvcHdhdGNoKSB7XG4gICAgICAgICAgICB2YXIgdGltZSA9IG5ldyBfdGltZS5UaW1lKHN0b3B3YXRjaC50aW1lLmN1cnJlbnRMYXApO1xuICAgICAgICAgICAgX3RoaXMudXBkYXRlVGltZSh0aW1lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gTGFwVGltZVZpZXc7XG59KF9UaW1lVmlldzIuVGltZVZpZXcpO1xuXG4vKioqLyB9KSxcbi8qIDE0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuVG90YWxUaW1lVmlldyA9IHVuZGVmaW5lZDtcblxudmFyIF9UaW1lVmlldzIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG52YXIgX3RpbWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX0V2ZW50TWFuYWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfRXZlbnRNYW5hZ2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0V2ZW50TWFuYWdlcik7XG5cbnZhciBfU3RvcHdhdGNoRXZlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG52YXIgX1N0b3B3YXRjaEV2ZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N0b3B3YXRjaEV2ZW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgVG90YWxUaW1lVmlldyA9IGV4cG9ydHMuVG90YWxUaW1lVmlldyA9IGZ1bmN0aW9uIChfVGltZVZpZXcpIHtcbiAgICBfaW5oZXJpdHMoVG90YWxUaW1lVmlldywgX1RpbWVWaWV3KTtcblxuICAgIGZ1bmN0aW9uIFRvdGFsVGltZVZpZXcoRE9NRGF0YSkge1xuICAgICAgICB2YXIgY29udHJvbGxlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbnVsbDtcblxuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVG90YWxUaW1lVmlldyk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFRvdGFsVGltZVZpZXcuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihUb3RhbFRpbWVWaWV3KSkuY2FsbCh0aGlzLCBET01EYXRhLCBjb250cm9sbGVyKSk7XG5cbiAgICAgICAgX0V2ZW50TWFuYWdlcjIuZGVmYXVsdC5hZGRFdmVudExpc3RlbmVyKF9TdG9wd2F0Y2hFdmVudDIuZGVmYXVsdC51cGRhdGVUb3RhbFRpbWUsIGZ1bmN0aW9uIChzdG9wd2F0Y2gpIHtcbiAgICAgICAgICAgIHZhciB0aW1lID0gbmV3IF90aW1lLlRpbWUoc3RvcHdhdGNoLnRpbWUudG90YWwpO1xuICAgICAgICAgICAgX3RoaXMudXBkYXRlVGltZSh0aW1lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gVG90YWxUaW1lVmlldztcbn0oX1RpbWVWaWV3Mi5UaW1lVmlldyk7XG5cbi8qKiovIH0pLFxuLyogMTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5MYXBzVGFibGVWaWV3ID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3RpbWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX0Jhc2VWaWV3MiA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfRXZlbnRNYW5hZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9FdmVudE1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRXZlbnRNYW5hZ2VyKTtcblxudmFyIF9TdG9wd2F0Y2hFdmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cbnZhciBfU3RvcHdhdGNoRXZlbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3RvcHdhdGNoRXZlbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBMYXBzVGFibGVWaWV3ID0gZXhwb3J0cy5MYXBzVGFibGVWaWV3ID0gZnVuY3Rpb24gKF9CYXNlVmlldykge1xuICAgIF9pbmhlcml0cyhMYXBzVGFibGVWaWV3LCBfQmFzZVZpZXcpO1xuXG4gICAgZnVuY3Rpb24gTGFwc1RhYmxlVmlldyhET01EYXRhKSB7XG4gICAgICAgIHZhciBjb250cm9sbGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuXG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMYXBzVGFibGVWaWV3KTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoTGFwc1RhYmxlVmlldy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExhcHNUYWJsZVZpZXcpKS5jYWxsKHRoaXMsIERPTURhdGEsIGNvbnRyb2xsZXIpKTtcblxuICAgICAgICBfdGhpcy4kY29udGFpbmVyLmlubmVySFRNTCA9IFwiXCI7XG5cbiAgICAgICAgX3RoaXMuX21pbmltdW1MYXBSb3dzID0gNztcbiAgICAgICAgX3RoaXMuX2N1cnJlbnRMYXBSb3dzID0gMDtcblxuICAgICAgICBfdGhpcy5hZGRFbXB0eVJvd3MoKTtcblxuICAgICAgICBfRXZlbnRNYW5hZ2VyMi5kZWZhdWx0LmFkZEV2ZW50TGlzdGVuZXIoX1N0b3B3YXRjaEV2ZW50Mi5kZWZhdWx0LnVwZGF0ZVJlY29yZGVkTGFwcywgX3RoaXMudXBkYXRlUm93cy5iaW5kKF90aGlzKSk7XG5cbiAgICAgICAgX0V2ZW50TWFuYWdlcjIuZGVmYXVsdC5hZGRFdmVudExpc3RlbmVyKF9TdG9wd2F0Y2hFdmVudDIuZGVmYXVsdC5zdG9wd2F0Y2hEaWRSZXNldCwgZnVuY3Rpb24gKHN0b3B3YXRjaCkge1xuICAgICAgICAgICAgX3RoaXMuJGNvbnRhaW5lci5pbm5lckhUTUwgPSBcIlwiO1xuICAgICAgICAgICAgX3RoaXMuX2N1cnJlbnRMYXBSb3dzID0gMDtcbiAgICAgICAgICAgIF90aGlzLmFkZEVtcHR5Um93cygpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMYXBzVGFibGVWaWV3LCBbe1xuICAgICAgICBrZXk6IFwiYWRkRW1wdHlSb3dzXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRFbXB0eVJvd3MoKSB7XG4gICAgICAgICAgICB3aGlsZSAodGhpcy5fY3VycmVudExhcFJvd3MgPCB0aGlzLl9taW5pbXVtTGFwUm93cykge1xuICAgICAgICAgICAgICAgIHZhciByb3dIVE1MID0gdGhpcy5pbml0aWFsSFRNTC5yZXBsYWNlKFwicGxhY2Vob2xkZXJMYWJlbFwiLCBcIlwiKS5yZXBsYWNlKFwicGxhY2Vob2xkZXJUaW1lXCIsIFwiXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuJGNvbnRhaW5lci5pbm5lckhUTUwgKz0gcm93SFRNTDtcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50TGFwUm93cysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwidXBkYXRlUm93c1wiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlUm93cyhfcmVmKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAgICAgdmFyIHJlY29yZGVkTGFwcyA9IF9yZWYucmVjb3JkZWRMYXBzO1xuXG4gICAgICAgICAgICB0aGlzLiRjb250YWluZXIuaW5uZXJIVE1MID0gXCJcIjtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRMYXBSb3dzID0gMDtcblxuICAgICAgICAgICAgcmVjb3JkZWRMYXBzLmZvckVhY2goZnVuY3Rpb24gKGxhcFRpbWUsIGxhcEluZGV4KSB7XG4gICAgICAgICAgICAgICAgdmFyIGxhcE51bWJlciA9IGxhcEluZGV4ICsgMTtcbiAgICAgICAgICAgICAgICB2YXIgdGltZSA9IG5ldyBfdGltZS5UaW1lKGxhcFRpbWUpO1xuICAgICAgICAgICAgICAgIHZhciB0aW1lU3RyaW5nID0gdGltZS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIHZhciB0aW1lSFRNTCA9IHRpbWVTdHJpbmcubWludXRlcyArIFwiOlwiICsgdGltZVN0cmluZy5zZWNvbmRzICsgXCIuXCIgKyB0aW1lU3RyaW5nLm1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgICAgICB2YXIgcm93SFRNTCA9IF90aGlzMi5pbml0aWFsSFRNTC5yZXBsYWNlKFwicGxhY2Vob2xkZXJMYWJlbFwiLCBcIkxhcCBcIiArIGxhcE51bWJlcikucmVwbGFjZShcInBsYWNlaG9sZGVyVGltZVwiLCB0aW1lSFRNTCk7XG5cbiAgICAgICAgICAgICAgICBfdGhpczIuJGNvbnRhaW5lci5pbm5lckhUTUwgKz0gcm93SFRNTDtcbiAgICAgICAgICAgICAgICBfdGhpczIuX2N1cnJlbnRMYXBSb3dzKys7XG4gICAgICAgICAgICB9LCB0aGlzKTtcblxuICAgICAgICAgICAgdGhpcy5hZGRFbXB0eVJvd3MoKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMYXBzVGFibGVWaWV3O1xufShfQmFzZVZpZXcyLkJhc2VWaWV3KTtcblxuLyoqKi8gfSlcbi8qKioqKiovIF0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBqcy9hcHAuYnVuZGxlLm1pbi5qcyIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDYpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDA2NTQ2ZjliOWU3ZWI2ZmIzZWU0IiwiZnVuY3Rpb24gdmFsaWRhdGVFdmVudCAoZXZlbnQpIHtcbiAgICBjb25zdCBldmVudFR5cGUgPSB0eXBlb2YgZXZlbnRcbiAgICBpZiAoZXZlbnRUeXBlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IFR5cGVFcnJvcihgUGFyYW1ldGVyICdldmVudCcgaXMgb2YgdHlwZSAke2V2ZW50VHlwZX0uIEl0IG5lZWRzIHRvIGJlIG9mIHR5cGUgJ3N0cmluZycuYClcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlTGlzdGVuZXIgKGxpc3RlbmVyKSB7XG4gICAgY29uc3QgbGlzdGVuZXJUeXBlID0gdHlwZW9mIGxpc3RlbmVyXG4gICAgaWYgKGxpc3RlbmVyVHlwZSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRocm93IFR5cGVFcnJvcihgUGFyYW1ldGVyICdsaXN0ZW5lcicgaXMgb2YgdHlwZSAke2xpc3RlbmVyVHlwZX0uIEl0IG5lZWRzIHRvIGJlIG9mIHR5cGUgJ2Z1bmN0aW9uJy5gKVxuICAgIH1cbn1cblxuY2xhc3MgRXZlbnRNYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIC8vIERpY3Rpb25hcnkgb2YgZXZlbnRzXG4gICAgICAgIC8vIEtleXMgYXJlIHN0cmluZ3MgKGV2ZW50LW5hbWVzKVxuICAgICAgICAvLyB2YWx1ZXMgYXJlIGFycmF5cyAobGlzdGVuZXJzKVxuICAgICAgICB0aGlzLl9ldmVudHMgPSB7fVxuICAgIH1cblxuICAgIC8vIENoZWNrcyBpZiBhbiBldmVudCBhbHJlYWR5IGV4aXN0c1xuICAgIC8vIEBwYXJhbSAtIGV2ZW50OiBTdHJpbmdcbiAgICBoYXNFdmVudCAoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLl9ldmVudHNbZXZlbnRdICE9PSBcInVuZGVmaW5lZFwiXG4gICAgfVxuXG4gICAgLy8gQWRkcyBhIG5ldyBldmVudFxuICAgIC8vIERvZXMgbm90aGluZyBpZiBhbiBldmVudCBieSB0aGF0IG5hbWUgYWxyZWFkeSBleGlzdHNcbiAgICAvLyBAcGFyYW0gLSBldmVudDogU3RyaW5nXG4gICAgLy8gQHRocm93cyAtIFR5cGVFcnJvclxuICAgIGFkZEV2ZW50IChldmVudCkge1xuICAgICAgICB2YWxpZGF0ZUV2ZW50KGV2ZW50KVxuXG4gICAgICAgIGlmICh0aGlzLmhhc0V2ZW50KGV2ZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9ldmVudHNbZXZlbnRdID0gW11cbiAgICB9XG5cbiAgICAvLyBSZW1vdmVzIGEgc3BlY2lmaWMgZXZlbnRcbiAgICAvLyBEb2VzIG5vdGhpbmcgaWYgdGhhdCBldmVudCBkb2Vzbid0IGV4aXN0XG4gICAgLy8gQHBhcmFtIC0gZXZlbnQ6IFN0cmluZ1xuICAgIC8vIEB0aHJvd3MgLSBUeXBlRXJyb3JcbiAgICByZW1vdmVFdmVudCAoZXZlbnQpIHtcbiAgICAgICAgdmFsaWRhdGVFdmVudChldmVudClcblxuICAgICAgICAvLyBUT0RPOiBSZW1vdmUgdGhlIGV2ZW50XG4gICAgfVxuXG4gICAgLy8gQWRkIGFuIGV2ZW50LWxpc3RlbmVyIGZvciBhIHNwZWNpZmljIGV2ZW50XG4gICAgLy8gQ3JlYXRlcyB0aGUgZXZlbnQgaWYgaXQgZG9lc24ndCBhbHJlYWR5IGV4aXN0XG4gICAgLy8gQHBhcmFtIC0gZXZlbnQ6IFN0cmluZ1xuICAgIC8vIEBwYXJhbSAtIGxpc3RlbmVyOiBGdW5jdGlvblxuICAgIC8vIEB0aHJvd3MgLSBUeXBlRXJyb3JcbiAgICBhZGRFdmVudExpc3RlbmVyIChldmVudCwgbGlzdGVuZXIpIHtcbiAgICAgICAgdmFsaWRhdGVMaXN0ZW5lcihsaXN0ZW5lcilcbiAgICAgICAgdGhpcy5hZGRFdmVudChldmVudClcbiAgICAgICAgdGhpcy5fZXZlbnRzW2V2ZW50XS5wdXNoKGxpc3RlbmVyKVxuICAgIH1cblxuICAgIC8vIFJlbW92ZXMgYW4gZXZlbnQtbGlzdGVuZXIgZnJvbSBhbiBldmVudFxuICAgIC8vIERvZXMgbm90aGluZyBpZiBhbiBldmVudCBkb2Vzbid0IGV4aXN0IHRvIHJlbW92ZVxuICAgIC8vIEBwYXJhbSAtIGV2ZW50OiBTdHJpbmdcbiAgICAvLyBAcGFyYW0gLSBsaXN0ZW5lcjogRnVuY3Rpb25cbiAgICAvLyBAdGhyb3dzIC0gVHlwZUVycm9yXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lciAoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHZhbGlkYXRlRXZlbnQoZXZlbnQpXG4gICAgICAgIHZhbGlkYXRlTGlzdGVuZXIobGlzdGVuZXIpXG5cbiAgICAgICAgaWYgKCF0aGlzLmhhc0V2ZW50KGV2ZW50KSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBDYW4ndCByZW1vdmUgdGhlIGV2ZW50IGxpc3RlbmVyIGJlY2F1c2UgaXQgZG9lcyBub3QgZXhpc3QhYClcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVE9ETzogRmluZCB0aGUgbGlzdGVuZXIgYW5kIHJlbW92ZSBpdFxuICAgIH1cblxuICAgIC8vIFRyaWdnZXJzIGV2ZW50LWxpc3RlbmVycyBmb3IgYW4gZXZlbnQgd2l0aCBhIHN1YmplY3RcbiAgICAvLyBEb2VzIG5vdGhpbmcgaWYgZXZlbnQgZG9lcyBub3QgZXhpc3RcbiAgICAvLyBAcGFyYW0gLSBldmVudDogU3RyaW5nXG4gICAgLy8gQHBhcmFtIC0gZGF0YTogT2JqZWN0XG4gICAgLy8gQHRocm93cyAtIFR5cGVFcnJvclxuICAgIHRyaWdnZXJFdmVudExpc3RlbmVycyAoZXZlbnQsIGRhdGEpIHtcbiAgICAgICAgdmFsaWRhdGVFdmVudChldmVudClcblxuICAgICAgICBpZiAoIXRoaXMuaGFzRXZlbnQoZXZlbnQpKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2V2ZW50c1tldmVudF0uZm9yRWFjaCgobGlzdGVuZXIpID0+IHtcbiAgICAgICAgICAgIGxpc3RlbmVyKGRhdGEpXG4gICAgICAgIH0pXG4gICAgfVxufVxuXG4vLyBUT0RPOiBVc2UgdGhlIG5ld2VyIEVDTUEgZXhwb3J0IG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0gbmV3IEV2ZW50TWFuYWdlcigpXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9oZWxwZXJzL0V2ZW50TWFuYWdlci5qcyIsIm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHVwZGF0ZUN1cnJlbnRMYXBUaW1lIDogXCJ1cGRhdGVDdXJyZW50TGFwVGltZVwiLFxuICAgIHVwZGF0ZVRvdGFsVGltZSAgICAgIDogXCJ1cGRhdGVUb3RhbFRpbWVcIixcbiAgICB1cGRhdGVSZWNvcmRlZExhcHMgICA6IFwidXBkYXRlUmVjb3JkZWRMYXBzXCIsXG4gICAgc3RvcHdhdGNoRGlkUmVzZXQgICAgOiBcInN0b3B3YXRjaERpZFJlc2V0XCJcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL21vZGVsL1N0b3B3YXRjaEV2ZW50LmpzIiwiZXhwb3J0IGNsYXNzIFRpbWUge1xuICAgIGNvbnN0cnVjdG9yIChtaWxsaXNlY29uZHMpIHtcbiAgICAgICAgdGhpcy50b3RhbE1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kc1xuICAgICAgICB0aGlzLm1pbnV0ZXMgPSAwXG4gICAgICAgIHRoaXMuc2Vjb25kcyA9IDBcbiAgICAgICAgdGhpcy5taWxsaXNlY29uZHMgPSAwXG5cbiAgICAgICAgdGhpcy5fcG9wdWxhdGVUaW1lRGF0YSgpXG4gICAgfVxuXG4gICAgX3BvcHVsYXRlVGltZURhdGEgKCkge1xuICAgICAgICBjb25zdCBNU0NPTlZFUlNJT05TID0gWyA2MDAwMCwgMTAwMCwgMSBdXG4gICAgICAgIGNvbnN0IGRpZmYgPSBbXVxuXG4gICAgICAgIE1TQ09OVkVSU0lPTlMuZm9yRWFjaCgodW5pdCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGRpZmZbMF0gPSBNYXRoLmZsb29yKHRoaXMudG90YWxNaWxsaXNlY29uZHMgLyB1bml0KVxuICAgICAgICAgICAgICAgIGRpZmZbMV0gPSB0aGlzLnRvdGFsTWlsbGlzZWNvbmRzICUgTVNDT05WRVJTSU9OU1swXVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCByZW1haW5kZXIgPSBkaWZmW2RpZmYubGVuZ3RoIC0gMV1cblxuICAgICAgICAgICAgZGlmZltkaWZmLmxlbmd0aCAtIDFdID0gTWF0aC5mbG9vcihyZW1haW5kZXIgLyB1bml0KVxuXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IE1TQ09OVkVSU0lPTlMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkaWZmW2RpZmYubGVuZ3RoXSA9IHJlbWFpbmRlciAlIHVuaXRcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLm1pbnV0ZXMgPSBkaWZmWzBdXG4gICAgICAgIHRoaXMuc2Vjb25kcyA9IGRpZmZbMV1cbiAgICAgICAgdGhpcy5taWxsaXNlY29uZHMgPSBkaWZmWzJdXG4gICAgfVxuXG4gICAgdG9TdHJpbmcgKCkge1xuICAgICAgICBjb25zdCBtaW51dGVzID0gdGhpcy5taW51dGVzIDwgMTAgPyBcIjBcIiArIHRoaXMubWludXRlcyA6IHRoaXMubWludXRlc1xuICAgICAgICBjb25zdCBzZWNvbmRzID0gdGhpcy5zZWNvbmRzIDwgMTAgPyBcIjBcIiArIHRoaXMuc2Vjb25kcyA6IHRoaXMuc2Vjb25kc1xuICAgICAgICBjb25zdCBtaWxsaXNlY29uZHMgPSAodGhpcy5taWxsaXNlY29uZHMgPCAxMFxuICAgICAgICAgICAgPyBcIjBcIiArIHRoaXMubWlsbGlzZWNvbmRzXG4gICAgICAgICAgICA6IHRoaXMubWlsbGlzZWNvbmRzLnRvU3RyaW5nKCkpLnN1YnN0cmluZygwLCAyKVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtaW51dGVzLFxuICAgICAgICAgICAgc2Vjb25kcyxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kc1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvbW9kZWwvdGltZS5qcyIsImltcG9ydCB7IERPTURhdGEgfSBmcm9tIFwiLi4vaGVscGVycy9ET01EYXRhXCJcblxuZXhwb3J0IGNsYXNzIEJhc2VWaWV3IHtcbiAgICBjb25zdHJ1Y3RvciAoRE9NRGF0YSwgY29udHJvbGxlciA9IG51bGwpIHtcbiAgICAgICAgdGhpcy5pbml0aWFsSFRNTCA9IERPTURhdGEuaHRtbFxuXG4gICAgICAgIHRoaXMuJGNvbnRhaW5lciA9IERPTURhdGEuJGNvbnRhaW5lclxuICAgICAgICB0aGlzLiRjb250YWluZXIuaW5uZXJIVE1MID0gdGhpcy5pbml0aWFsSFRNTFxuXG4gICAgICAgIHRoaXMuY2xhc3NOYW1lcyA9IHt9XG5cbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gY29udHJvbGxlclxuICAgIH1cblxuICAgIC8vIFRPRE86IEFkZCB2YWxpZGF0aW9uIGZvciBwYXJhbWV0ZXJzXG4gICAgYWRkRXZlbnRMaXN0ZW5lciAoJGVsLCBldmVudFR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICAgICRlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgdGhpcy5jb250cm9sbGVyW2xpc3RlbmVyXS5iaW5kKHRoaXMuY29udHJvbGxlciwgdGhpcyksIGZhbHNlKVxuICAgIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL3ZpZXcvQmFzZVZpZXcuanMiLCJleHBvcnQgY2xhc3MgRE9NRGF0YSB7XG4gICAgY29uc3RydWN0b3IgKGNvbnRhaW5lclNlbGVjdG9yLCB0ZW1wbGF0ZVNlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMuJGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyU2VsZWN0b3IpXG4gICAgICAgIHRoaXMuaHRtbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGVtcGxhdGVTZWxlY3RvcikuaW5uZXJIVE1MXG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvaGVscGVycy9ET01EYXRhLmpzIiwiaW1wb3J0IHsgQmFzZVZpZXcgfSBmcm9tIFwiLi9CYXNlVmlld1wiXG5pbXBvcnQgeyBUaW1lIH0gZnJvbSBcIi4uL21vZGVsL3RpbWVcIlxuaW1wb3J0IGV2ZW50TWFuYWdlciBmcm9tIFwiLi4vaGVscGVycy9FdmVudE1hbmFnZXJcIlxuaW1wb3J0IHN0b3B3YXRjaEV2ZW50IGZyb20gXCIuLi9tb2RlbC9TdG9wd2F0Y2hFdmVudFwiXG5cbmV4cG9ydCBjbGFzcyBUaW1lVmlldyBleHRlbmRzIEJhc2VWaWV3IHtcbiAgICBjb25zdHJ1Y3RvciAoRE9NRGF0YSwgY29udHJvbGxlciA9IG51bGwpIHtcbiAgICAgICAgc3VwZXIoRE9NRGF0YSwgY29udHJvbGxlcilcblxuICAgICAgICB0aGlzLl9wcmV2VGltZSA9IG5ldyBUaW1lKDApXG4gICAgICAgIHRoaXMuX3NldHVwRE9NUmVmcygpXG5cbiAgICAgICAgZXZlbnRNYW5hZ2VyLmFkZEV2ZW50TGlzdGVuZXIoc3RvcHdhdGNoRXZlbnQuc3RvcHdhdGNoRGlkUmVzZXQsIChzdG9wd2F0Y2gpID0+IHtcbiAgICAgICAgICAgIHRoaXMuJGNvbnRhaW5lci5pbm5lckhUTUwgPSB0aGlzLmluaXRpYWxIVE1MXG4gICAgICAgICAgICB0aGlzLl9zZXR1cERPTVJlZnMoKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIF9zZXR1cERPTVJlZnMgKCkge1xuICAgICAgICB0aGlzLiRtaW51dGVzID0gdGhpcy4kY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIubWludXRlc1wiKVxuICAgICAgICB0aGlzLiRzZWNvbmRzID0gdGhpcy4kY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIuc2Vjb25kc1wiKVxuICAgICAgICB0aGlzLiRtaWxsaXNlY29uZHMgPSB0aGlzLiRjb250YWluZXIucXVlcnlTZWxlY3RvcihcIi5taWxsaXNlY29uZHNcIilcbiAgICB9XG5cbiAgICB1cGRhdGVUaW1lICh0aW1lKSB7XG4gICAgICAgIGlmICh0aW1lLm1pbnV0ZXMgIT09IHRoaXMuX3ByZXZUaW1lLm1pbnV0ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuJG1pbnV0ZXMudGV4dENvbnRlbnQgPSB0aW1lLnRvU3RyaW5nKCkubWludXRlc1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRpbWUuc2Vjb25kcyAhPT0gdGhpcy5fcHJldlRpbWUuc2Vjb25kcykge1xuICAgICAgICAgICAgdGhpcy4kc2Vjb25kcy50ZXh0Q29udGVudCA9IHRpbWUudG9TdHJpbmcoKS5zZWNvbmRzXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGltZS5taWxsaXNlY29uZHMgIT09IHRoaXMuX3ByZXZUaW1lLm1pbGxpc2Vjb25kcykge1xuICAgICAgICAgICAgdGhpcy4kbWlsbGlzZWNvbmRzLnRleHRDb250ZW50ID0gdGltZS50b1N0cmluZygpLm1pbGxpc2Vjb25kc1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcHJldlRpbWUgPSB0aW1lXG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvdmlldy9UaW1lVmlldy5qcyIsImltcG9ydCBcIi4uL3Njc3MvYXBwLnNjc3NcIlxuXG5pbXBvcnQgeyBTdG9wd2F0Y2ggfSBmcm9tIFwiLi9tb2RlbC9zdG9wd2F0Y2hcIlxuXG5pbXBvcnQgeyBET01EYXRhIH0gZnJvbSBcIi4vaGVscGVycy9ET01EYXRhXCJcblxuaW1wb3J0IHsgU3RvcHdhdGNoQ29udHJvbHNWaWV3IH0gZnJvbSBcIi4vdmlldy9TdG9wd2F0Y2hDb250cm9sc1ZpZXdcIlxuaW1wb3J0IHsgU3RvcHdhdGNoQ29udHJvbHNDb250cm9sbGVyIH0gZnJvbSBcIi4vY29udHJvbGxlci9TdG9wd2F0Y2hDb250cm9sc0NvbnRyb2xsZXJcIlxuXG5pbXBvcnQgeyBMYXBUaW1lVmlldyB9IGZyb20gXCIuL3ZpZXcvTGFwVGltZVZpZXdcIlxuaW1wb3J0IHsgVG90YWxUaW1lVmlldyB9IGZyb20gXCIuL3ZpZXcvVG90YWxUaW1lVmlld1wiXG5cbmltcG9ydCB7IExhcHNUYWJsZVZpZXcgfSBmcm9tIFwiLi92aWV3L0xhcHNUYWJsZVZpZXdcIlxuXG5jb25zdCBzdG9wd2F0Y2ggPSBuZXcgU3RvcHdhdGNoKClcblxuY29uc3Qgc3RvcHdhdGNoQ29udHJvbHNDb250cm9sbGVyID0gbmV3IFN0b3B3YXRjaENvbnRyb2xzQ29udHJvbGxlcihzdG9wd2F0Y2gpXG5jb25zdCBzdG9wd2F0Y2hDb250cm9sc1ZpZXcgPSBuZXcgU3RvcHdhdGNoQ29udHJvbHNWaWV3KFxuICAgIG5ldyBET01EYXRhKFwiLmNvbnRyb2xzXCIsIFwiI3N0b3B3YXRjaENvbnRyb2xzXCIpLFxuICAgIHN0b3B3YXRjaENvbnRyb2xzQ29udHJvbGxlclxuKVxuXG5jb25zdCBsYXBUaW1lVmlldyA9IG5ldyBMYXBUaW1lVmlldyhuZXcgRE9NRGF0YShcIi5sYXBDb3VudFwiLCBcIiNzdG9wd2F0Y2hMYXBUaW1lXCIpKVxuXG5jb25zdCB0b3RhbFRpbWVWaWV3ID0gbmV3IFRvdGFsVGltZVZpZXcobmV3IERPTURhdGEoXCIudG90YWxDb3VudFwiLCBcIiNzdG9wd2F0Y2hUb3RhbFRpbWVcIikpXG5cbmNvbnN0IGxhcHNUYWJsZVZpZXcgPSBuZXcgTGFwc1RhYmxlVmlldyhuZXcgRE9NRGF0YShcIi5sYXBzVGFibGVcIiwgXCIjc3RvcHdhdGNoTGFwc1RhYmxlUm93XCIpKVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvYXBwLmpzIiwiaW1wb3J0IHsgVGlja2VyIH0gZnJvbSBcIi4vVGlja2VyXCJcbmltcG9ydCBldmVudE1hbmFnZXIgZnJvbSBcIi4uL2hlbHBlcnMvRXZlbnRNYW5hZ2VyXCJcbmltcG9ydCBzdG9wd2F0Y2hFdmVudCBmcm9tIFwiLi9TdG9wd2F0Y2hFdmVudFwiXG5cbmV4cG9ydCBjbGFzcyBTdG9wd2F0Y2gge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgdGhpcy5fbGFwVGltZVRpY2tlciA9IG5ldyBUaWNrZXIoKVxuICAgICAgICB0aGlzLl90b3RhbFRpbWVUaWNrZXIgPSBuZXcgVGlja2VyKClcbiAgICAgICAgdGhpcy5yZWNvcmRlZExhcHMgPSBbXVxuXG4gICAgICAgIHRoaXMudGltZSA9IHtcbiAgICAgICAgICAgIGN1cnJlbnRMYXAgOiB0aGlzLl9sYXBUaW1lVGlja2VyLnRpbWUsXG4gICAgICAgICAgICB0b3RhbCAgICAgIDogdGhpcy5fdG90YWxUaW1lVGlja2VyLnRpbWVcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGV2ZW50IGluIHN0b3B3YXRjaEV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoc3RvcHdhdGNoRXZlbnQuaGFzT3duUHJvcGVydHkoZXZlbnQpKSB7XG4gICAgICAgICAgICAgICAgZXZlbnRNYW5hZ2VyLmFkZEV2ZW50KHN0b3B3YXRjaEV2ZW50W2V2ZW50XSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXJ0ICgpIHtcbiAgICAgICAgdGhpcy5fbGFwVGltZVRpY2tlci5zdGFydFRpY2tpbmcoKHRpbWUpID0+IHtcbiAgICAgICAgICAgIHRoaXMudGltZS5jdXJyZW50TGFwID0gdGltZVxuICAgICAgICAgICAgZXZlbnRNYW5hZ2VyLnRyaWdnZXJFdmVudExpc3RlbmVycyhzdG9wd2F0Y2hFdmVudC51cGRhdGVDdXJyZW50TGFwVGltZSwgdGhpcylcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLl90b3RhbFRpbWVUaWNrZXIuc3RhcnRUaWNraW5nKCh0aW1lKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRpbWUudG90YWwgPSB0aW1lXG4gICAgICAgICAgICBldmVudE1hbmFnZXIudHJpZ2dlckV2ZW50TGlzdGVuZXJzKHN0b3B3YXRjaEV2ZW50LnVwZGF0ZVRvdGFsVGltZSwgdGhpcylcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBzdG9wICgpIHtcbiAgICAgICAgdGhpcy5fbGFwVGltZVRpY2tlci5zdG9wVGlja2luZygpXG4gICAgICAgIHRoaXMuX3RvdGFsVGltZVRpY2tlci5zdG9wVGlja2luZygpXG4gICAgfVxuXG4gICAgcmVzZXQgKCkge1xuICAgICAgICB0aGlzLl9sYXBUaW1lVGlja2VyLnJlc2V0KClcbiAgICAgICAgdGhpcy5fdG90YWxUaW1lVGlja2VyLnJlc2V0KClcbiAgICAgICAgdGhpcy5yZWNvcmRlZExhcHMgPSBbXVxuICAgICAgICBldmVudE1hbmFnZXIudHJpZ2dlckV2ZW50TGlzdGVuZXJzKHN0b3B3YXRjaEV2ZW50LnN0b3B3YXRjaERpZFJlc2V0LCB0aGlzKVxuICAgIH1cblxuICAgIHJlY29yZExhcCAoKSB7XG4gICAgICAgIHRoaXMucmVjb3JkZWRMYXBzLnB1c2godGhpcy5fbGFwVGltZVRpY2tlci50aW1lKVxuICAgICAgICBldmVudE1hbmFnZXIudHJpZ2dlckV2ZW50TGlzdGVuZXJzKHN0b3B3YXRjaEV2ZW50LnVwZGF0ZVJlY29yZGVkTGFwcywgdGhpcylcblxuICAgICAgICB0aGlzLl9sYXBUaW1lVGlja2VyLnJlc2V0KClcbiAgICAgICAgdGhpcy50aW1lLmN1cnJlbnRMYXAgPSB0aGlzLl9sYXBUaW1lVGlja2VyLnRpbWVcbiAgICAgICAgZXZlbnRNYW5hZ2VyLnRyaWdnZXJFdmVudExpc3RlbmVycyhzdG9wd2F0Y2hFdmVudC51cGRhdGVDdXJyZW50TGFwVGltZSwgdGhpcylcbiAgICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9tb2RlbC9zdG9wd2F0Y2guanMiLCJpbXBvcnQgeyBzZXRDb3JyZWN0aW5nSW50ZXJ2YWwsIGNsZWFyQ29ycmVjdGluZ0ludGVydmFsIH0gZnJvbSBcImNvcnJlY3RpbmctaW50ZXJ2YWxcIlxuXG5mdW5jdGlvbiB2YWxpZGF0ZUNhbGxiYWNrIChjYWxsYmFjaykge1xuICAgIGNvbnN0IGNhbGxiYWNrVHlwZSA9IHR5cGVvZiBjYWxsYmFja1xuICAgIGlmIChjYWxsYmFja1R5cGUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoYFBhcmFtZXRlciAnY2FsbGJhY2snIGlzIG9mIHR5cGUgJHtjYWxsYmFja1R5cGV9LiBJdCBuZWVkcyB0byBiZSBvZiB0eXBlICdmdW5jdGlvbicuYClcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUaWNrZXIge1xuICAgIGNvbnN0cnVjdG9yICh0aWNrUmF0ZSA9IDEwKSB7XG4gICAgICAgIHRoaXMuX3RpY2tSYXRlID0gdGlja1JhdGUgLy8gSW4gbWlsbGlzZWNvbmRzXG4gICAgICAgIHRoaXMuX2VsYXBzZWRUaW1lID0gMCAvLyBJbiBtaWxsaXNlY29uZHNcbiAgICAgICAgdGhpcy5faW50ZXJ2YWxJRCA9IG51bGxcbiAgICAgICAgdGhpcy5faXNUaWNraW5nID0gZmFsc2VcbiAgICB9XG5cbiAgICBnZXQgdGltZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbGFwc2VkVGltZVxuICAgIH1cblxuICAgIHN0YXJ0VGlja2luZyAoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHRoaXMuaXNUaWNraW5nKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2ludGVydmFsSUQgPSBzZXRDb3JyZWN0aW5nSW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fZWxhcHNlZFRpbWUgKz0gdGhpcy5fdGlja1JhdGVcbiAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMudGltZSlcbiAgICAgICAgfSwgdGhpcy5fdGlja1JhdGUpXG5cbiAgICAgICAgdGhpcy5faXNUaWNraW5nID0gdHJ1ZVxuICAgICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBzdG9wVGlja2luZyAoKSB7XG4gICAgICAgIGlmICghdGhpcy5faXNUaWNraW5nKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGNsZWFyQ29ycmVjdGluZ0ludGVydmFsKHRoaXMuX2ludGVydmFsSUQpXG5cbiAgICAgICAgdGhpcy5faWQgPSBudWxsXG4gICAgICAgIHRoaXMuX2lzVGlja2luZyA9IGZhbHNlXG4gICAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHJlc2V0ICgpIHtcbiAgICAgICAgdGhpcy5fZWxhcHNlZFRpbWUgPSAwXG4gICAgICAgIHJldHVyblxuICAgIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL21vZGVsL1RpY2tlci5qcyIsIi8qISBjb3JyZWN0aW5nLWludGVydmFsIDIuMC4wIHwgQ29weXJpZ2h0IDIwMTQgQW5kcmV3IER1dGhpZSB8IE1JVCBMaWNlbnNlICovXG4vKiBqc2hpbnQgZXZpbDogdHJ1ZSAqL1xuOyhmdW5jdGlvbihnbG9iYWwsIGZhY3RvcnkpIHtcbiAgLy8gVXNlIFVNRCBwYXR0ZXJuIHRvIGV4cG9zZSBleHBvcnRlZCBmdW5jdGlvbnNcbiAgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIC8vIEV4cG9zZSB0byBOb2RlLmpzXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gRXhwb3NlIHRvIFJlcXVpcmVKU1xuICAgIGRlZmluZShbXSwgZmFjdG9yeSk7XG4gIH1cblxuICAvLyBFeHBvc2UgdG8gZ2xvYmFsIG9iamVjdCAobGlrZWx5IGJyb3dzZXIgd2luZG93KVxuICB2YXIgZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgZm9yICh2YXIgcHJvcCBpbiBleHBvcnRzKSB7XG4gICAgZ2xvYmFsW3Byb3BdID0gZXhwb3J0c1twcm9wXTtcbiAgfVxufSh0aGlzLCBmdW5jdGlvbigpIHtcbiAgLy8gVHJhY2sgcnVubmluZyBpbnRlcnZhbHNcbiAgdmFyIG51bUludGVydmFscyA9IDAsXG4gICAgaW50ZXJ2YWxzID0ge307XG5cbiAgLy8gUG9seWZpbGwgRGF0ZS5ub3dcbiAgdmFyIG5vdyA9IERhdGUubm93IHx8IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSgpLnZhbHVlT2YoKTtcbiAgfTtcblxuICB2YXIgc2V0Q29ycmVjdGluZ0ludGVydmFsID0gZnVuY3Rpb24oZnVuYywgZGVsYXkpIHtcbiAgICB2YXIgaWQgPSBudW1JbnRlcnZhbHMrKyxcbiAgICAgIHBsYW5uZWQgPSBub3coKSArIGRlbGF5O1xuXG4gICAgLy8gTm9ybWFsaXplIGZ1bmMgYXMgZnVuY3Rpb25cbiAgICBzd2l0Y2ggKHR5cGVvZiBmdW5jKSB7XG4gICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgdmFyIHNGdW5jID0gZnVuYztcbiAgICAgICAgZnVuYyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV2YWwoc0Z1bmMpO1xuICAgICAgICB9O1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGZ1bmMgPSBmdW5jdGlvbigpIHsgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0aWNrKCkge1xuICAgICAgZnVuYygpO1xuXG4gICAgICAvLyBPbmx5IHJlLXJlZ2lzdGVyIGlmIGNsZWFyQ29ycmVjdGluZ0ludGVydmFsIHdhcyBub3QgY2FsbGVkIGR1cmluZyBmdW5jdGlvblxuICAgICAgaWYgKGludGVydmFsc1tpZF0pIHtcbiAgICAgICAgcGxhbm5lZCArPSBkZWxheTtcbiAgICAgICAgaW50ZXJ2YWxzW2lkXSA9IHNldFRpbWVvdXQodGljaywgcGxhbm5lZCAtIG5vdygpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnRlcnZhbHNbaWRdID0gc2V0VGltZW91dCh0aWNrLCBkZWxheSk7XG4gICAgcmV0dXJuIGlkO1xuICB9O1xuXG4gIHZhciBjbGVhckNvcnJlY3RpbmdJbnRlcnZhbCA9IGZ1bmN0aW9uKGlkKSB7XG4gICAgY2xlYXJUaW1lb3V0KGludGVydmFsc1tpZF0pO1xuICAgIGRlbGV0ZSBpbnRlcnZhbHNbaWRdO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgc2V0Q29ycmVjdGluZ0ludGVydmFsOiBzZXRDb3JyZWN0aW5nSW50ZXJ2YWwsXG4gICAgY2xlYXJDb3JyZWN0aW5nSW50ZXJ2YWw6IGNsZWFyQ29ycmVjdGluZ0ludGVydmFsXG4gIH07XG59KSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi4vbm9kZV9tb2R1bGVzL2NvcnJlY3RpbmctaW50ZXJ2YWwvY29ycmVjdGluZ0ludGVydmFsLmpzXG4vLyBtb2R1bGUgaWQgPSAxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgeyBCYXNlVmlldyB9IGZyb20gXCIuL0Jhc2VWaWV3XCJcblxuZXhwb3J0IGNsYXNzIFN0b3B3YXRjaENvbnRyb2xzVmlldyBleHRlbmRzIEJhc2VWaWV3IHtcbiAgICBjb25zdHJ1Y3RvciAoRE9NRGF0YSwgY29udHJvbGxlcikge1xuICAgICAgICBzdXBlcihET01EYXRhLCBjb250cm9sbGVyKVxuXG4gICAgICAgIHRoaXMuY2xhc3NOYW1lcy5oaWRlID0gXCJoaWRkZW5cIlxuICAgICAgICB0aGlzLmNsYXNzTmFtZXMuZGlzYWJsZWQgPSBcImRpc2FibGVkXCJcblxuICAgICAgICB0aGlzLiRzdGFydEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3RhcnRCdG5cIilcbiAgICAgICAgdGhpcy4kc3RvcEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3RvcEJ0blwiKVxuICAgICAgICB0aGlzLiRyZXNldEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzZXRCdG5cIilcbiAgICAgICAgdGhpcy4kbGFwQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsYXBCdG5cIilcblxuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIodGhpcy4kc3RhcnRCdG4sIFwiY2xpY2tcIiwgXCJoYW5kbGVDbGlja1N0YXJ0QnV0dG9uXCIpXG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLiRsYXBCdG4sIFwiY2xpY2tcIiwgXCJoYW5kbGVDbGlja0xhcEJ1dHRvblwiKVxuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIodGhpcy4kc3RvcEJ0biwgXCJjbGlja1wiLCBcImhhbmRsZUNsaWNrU3RvcEJ1dHRvblwiKVxuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIodGhpcy4kcmVzZXRCdG4sIFwiY2xpY2tcIiwgXCJoYW5kbGVDbGlja1Jlc2V0QnV0dG9uXCIpXG4gICAgfVxuXG4gICAgaGlkZUFsbEJ0bnMgKCkge1xuICAgICAgICB0aGlzLiRzdGFydEJ0bi5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3NOYW1lcy5oaWRlKVxuICAgICAgICB0aGlzLiRsYXBCdG4uY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZXMuaGlkZSlcbiAgICAgICAgdGhpcy4kc3RvcEJ0bi5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3NOYW1lcy5oaWRlKVxuICAgICAgICB0aGlzLiRyZXNldEJ0bi5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3NOYW1lcy5oaWRlKVxuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgc2hvd1N0YXJ0QnRuICgpIHtcbiAgICAgICAgdGhpcy4kc3RhcnRCdG4uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzTmFtZXMuaGlkZSlcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBzaG93TGFwQnRuIChkaXNhYmxlID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLiRsYXBCdG4uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzTmFtZXMuaGlkZSlcblxuICAgICAgICBpZiAoZGlzYWJsZSkge1xuICAgICAgICAgICAgdGhpcy4kbGFwQnRuLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc05hbWVzLmRpc2FibGVkKVxuICAgICAgICAgICAgdGhpcy4kbGFwQnRuLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwidHJ1ZVwiKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy4kbGFwQnRuLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5jbGFzc05hbWVzLmRpc2FibGVkKVxuICAgICAgICAgICAgdGhpcy4kbGFwQnRuLnJlbW92ZUF0dHJpYnV0ZShcImRpc2FibGVkXCIpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHNob3dTdG9wQnRuICgpIHtcbiAgICAgICAgdGhpcy4kc3RvcEJ0bi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuY2xhc3NOYW1lcy5oaWRlKVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHNob3dSZXNldEJ0biAoKSB7XG4gICAgICAgIHRoaXMuJHJlc2V0QnRuLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5jbGFzc05hbWVzLmhpZGUpXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvdmlldy9TdG9wd2F0Y2hDb250cm9sc1ZpZXcuanMiLCJpbXBvcnQgZXZlbnRNYW5hZ2VyIGZyb20gXCIuLi9oZWxwZXJzL0V2ZW50TWFuYWdlclwiXG5cbmV4cG9ydCBjbGFzcyBTdG9wd2F0Y2hDb250cm9sc0NvbnRyb2xsZXIge1xuICAgIGNvbnN0cnVjdG9yIChtb2RlbCkge1xuICAgICAgICB0aGlzLnN0b3B3YXRjaCA9IG1vZGVsXG4gICAgfVxuXG4gICAgaGFuZGxlQ2xpY2tTdGFydEJ1dHRvbiAodmlldywgZXZlbnQpIHtcbiAgICAgICAgdGhpcy5zdG9wd2F0Y2guc3RhcnQoKVxuICAgICAgICB2aWV3LmhpZGVBbGxCdG5zKCkuc2hvd1N0b3BCdG4oKS5zaG93TGFwQnRuKGZhbHNlKVxuICAgIH1cblxuICAgIGhhbmRsZUNsaWNrTGFwQnV0dG9uICh2aWV3LCBldmVudCkge1xuICAgICAgICB0aGlzLnN0b3B3YXRjaC5yZWNvcmRMYXAoKVxuICAgIH1cblxuICAgIGhhbmRsZUNsaWNrU3RvcEJ1dHRvbiAodmlldywgZXZlbnQpIHtcbiAgICAgICAgdGhpcy5zdG9wd2F0Y2guc3RvcCgpXG4gICAgICAgIHZpZXcuaGlkZUFsbEJ0bnMoKS5zaG93U3RhcnRCdG4oKS5zaG93UmVzZXRCdG4oKVxuICAgIH1cblxuICAgIGhhbmRsZUNsaWNrUmVzZXRCdXR0b24gKHZpZXcsIGV2ZW50KSB7XG4gICAgICAgIHRoaXMuc3RvcHdhdGNoLnJlc2V0KClcbiAgICAgICAgdmlldy5oaWRlQWxsQnRucygpLnNob3dTdGFydEJ0bigpLnNob3dMYXBCdG4oKVxuICAgIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NvbnRyb2xsZXIvU3RvcHdhdGNoQ29udHJvbHNDb250cm9sbGVyLmpzIiwiaW1wb3J0IHsgVGltZVZpZXcgfSBmcm9tIFwiLi9UaW1lVmlld1wiXG5pbXBvcnQgeyBUaW1lIH0gZnJvbSBcIi4uL21vZGVsL3RpbWVcIlxuaW1wb3J0IGV2ZW50TWFuYWdlciBmcm9tIFwiLi4vaGVscGVycy9FdmVudE1hbmFnZXJcIlxuaW1wb3J0IHN0b3B3YXRjaEV2ZW50IGZyb20gXCIuLi9tb2RlbC9TdG9wd2F0Y2hFdmVudFwiXG5cbmV4cG9ydCBjbGFzcyBMYXBUaW1lVmlldyBleHRlbmRzIFRpbWVWaWV3IHtcbiAgICBjb25zdHJ1Y3RvciAoRE9NRGF0YSwgY29udHJvbGxlciA9IG51bGwpIHtcbiAgICAgICAgc3VwZXIoRE9NRGF0YSwgY29udHJvbGxlcilcblxuICAgICAgICBldmVudE1hbmFnZXIuYWRkRXZlbnRMaXN0ZW5lcihzdG9wd2F0Y2hFdmVudC51cGRhdGVDdXJyZW50TGFwVGltZSwgKHN0b3B3YXRjaCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGltZSA9IG5ldyBUaW1lKHN0b3B3YXRjaC50aW1lLmN1cnJlbnRMYXApXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVRpbWUodGltZSlcbiAgICAgICAgfSlcbiAgICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy92aWV3L0xhcFRpbWVWaWV3LmpzIiwiaW1wb3J0IHsgVGltZVZpZXcgfSBmcm9tIFwiLi9UaW1lVmlld1wiXG5pbXBvcnQgeyBUaW1lIH0gZnJvbSBcIi4uL21vZGVsL3RpbWVcIlxuaW1wb3J0IGV2ZW50TWFuYWdlciBmcm9tIFwiLi4vaGVscGVycy9FdmVudE1hbmFnZXJcIlxuaW1wb3J0IHN0b3B3YXRjaEV2ZW50IGZyb20gXCIuLi9tb2RlbC9TdG9wd2F0Y2hFdmVudFwiXG5cbmV4cG9ydCBjbGFzcyBUb3RhbFRpbWVWaWV3IGV4dGVuZHMgVGltZVZpZXcge1xuICAgIGNvbnN0cnVjdG9yIChET01EYXRhLCBjb250cm9sbGVyID0gbnVsbCkge1xuICAgICAgICBzdXBlcihET01EYXRhLCBjb250cm9sbGVyKVxuXG4gICAgICAgIGV2ZW50TWFuYWdlci5hZGRFdmVudExpc3RlbmVyKHN0b3B3YXRjaEV2ZW50LnVwZGF0ZVRvdGFsVGltZSwgKHN0b3B3YXRjaCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGltZSA9IG5ldyBUaW1lKHN0b3B3YXRjaC50aW1lLnRvdGFsKVxuICAgICAgICAgICAgdGhpcy51cGRhdGVUaW1lKHRpbWUpXG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvdmlldy9Ub3RhbFRpbWVWaWV3LmpzIiwiaW1wb3J0IHsgVGltZSB9IGZyb20gXCIuLi9tb2RlbC90aW1lXCJcbmltcG9ydCB7IEJhc2VWaWV3IH0gZnJvbSBcIi4vQmFzZVZpZXdcIlxuaW1wb3J0IGV2ZW50TWFuYWdlciBmcm9tIFwiLi4vaGVscGVycy9FdmVudE1hbmFnZXJcIlxuaW1wb3J0IHN0b3B3YXRjaEV2ZW50IGZyb20gXCIuLi9tb2RlbC9TdG9wd2F0Y2hFdmVudFwiXG5cbmV4cG9ydCBjbGFzcyBMYXBzVGFibGVWaWV3IGV4dGVuZHMgQmFzZVZpZXcge1xuICAgIGNvbnN0cnVjdG9yIChET01EYXRhLCBjb250cm9sbGVyID0gbnVsbCkge1xuICAgICAgICBzdXBlcihET01EYXRhLCBjb250cm9sbGVyKVxuXG4gICAgICAgIHRoaXMuJGNvbnRhaW5lci5pbm5lckhUTUwgPSBcIlwiXG5cbiAgICAgICAgdGhpcy5fbWluaW11bUxhcFJvd3MgPSA3XG4gICAgICAgIHRoaXMuX2N1cnJlbnRMYXBSb3dzID0gMFxuXG4gICAgICAgIHRoaXMuYWRkRW1wdHlSb3dzKClcblxuICAgICAgICBldmVudE1hbmFnZXIuYWRkRXZlbnRMaXN0ZW5lcihzdG9wd2F0Y2hFdmVudC51cGRhdGVSZWNvcmRlZExhcHMsIHRoaXMudXBkYXRlUm93cy5iaW5kKHRoaXMpKVxuXG4gICAgICAgIGV2ZW50TWFuYWdlci5hZGRFdmVudExpc3RlbmVyKHN0b3B3YXRjaEV2ZW50LnN0b3B3YXRjaERpZFJlc2V0LCAoc3RvcHdhdGNoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiRjb250YWluZXIuaW5uZXJIVE1MID0gXCJcIlxuICAgICAgICAgICAgdGhpcy5fY3VycmVudExhcFJvd3MgPSAwXG4gICAgICAgICAgICB0aGlzLmFkZEVtcHR5Um93cygpXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgYWRkRW1wdHlSb3dzICgpIHtcbiAgICAgICAgd2hpbGUgKHRoaXMuX2N1cnJlbnRMYXBSb3dzIDwgdGhpcy5fbWluaW11bUxhcFJvd3MpIHtcbiAgICAgICAgICAgIGNvbnN0IHJvd0hUTUwgPSB0aGlzLmluaXRpYWxIVE1MLnJlcGxhY2UoXCJwbGFjZWhvbGRlckxhYmVsXCIsIFwiXCIpLnJlcGxhY2UoXCJwbGFjZWhvbGRlclRpbWVcIiwgXCJcIilcbiAgICAgICAgICAgIHRoaXMuJGNvbnRhaW5lci5pbm5lckhUTUwgKz0gcm93SFRNTFxuICAgICAgICAgICAgdGhpcy5fY3VycmVudExhcFJvd3MrK1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlUm93cyAoeyByZWNvcmRlZExhcHMgfSkge1xuICAgICAgICB0aGlzLiRjb250YWluZXIuaW5uZXJIVE1MID0gXCJcIlxuICAgICAgICB0aGlzLl9jdXJyZW50TGFwUm93cyA9IDBcblxuICAgICAgICByZWNvcmRlZExhcHMuZm9yRWFjaCgobGFwVGltZSwgbGFwSW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxhcE51bWJlciA9IGxhcEluZGV4ICsgMVxuICAgICAgICAgICAgY29uc3QgdGltZSA9IG5ldyBUaW1lKGxhcFRpbWUpXG4gICAgICAgICAgICBjb25zdCB0aW1lU3RyaW5nID0gdGltZS50b1N0cmluZygpXG4gICAgICAgICAgICBjb25zdCB0aW1lSFRNTCA9IGAke3RpbWVTdHJpbmcubWludXRlc306JHt0aW1lU3RyaW5nLnNlY29uZHN9LiR7dGltZVN0cmluZy5taWxsaXNlY29uZHN9YFxuICAgICAgICAgICAgY29uc3Qgcm93SFRNTCA9IHRoaXMuaW5pdGlhbEhUTUxcbiAgICAgICAgICAgICAgICAucmVwbGFjZShcInBsYWNlaG9sZGVyTGFiZWxcIiwgYExhcCAke2xhcE51bWJlcn1gKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKFwicGxhY2Vob2xkZXJUaW1lXCIsIHRpbWVIVE1MKVxuXG4gICAgICAgICAgICB0aGlzLiRjb250YWluZXIuaW5uZXJIVE1MICs9IHJvd0hUTUxcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRMYXBSb3dzKytcbiAgICAgICAgfSwgdGhpcylcblxuICAgICAgICB0aGlzLmFkZEVtcHR5Um93cygpXG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvdmlldy9MYXBzVGFibGVWaWV3LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==